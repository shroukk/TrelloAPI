{
	"info": {
		"_postman_id": "ebfab7a7-d37e-4766-8c11-8b48845ca06a",
		"name": "TrelloAPI",
		"schema": "https://schema.getpostman.com/json/collection/v2.0.0/collection.json",
		"_exporter_id": "17626861"
	},
	"item": [
		{
			"name": "Board",
			"item": [
				{
					"name": "Create-Board",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const randomName = 'Board' + Math.floor(Math.random() * 1000);\r",
									"pm.collectionVariables.set(\"name\", randomName);\r",
									"pm.collectionVariables.set(\"desc\", \"Testing Trello api create board endpoint\")"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"// check status code\r",
									"pm.test(\"Status code is 200\",  () => {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"// check response time\r",
									"pm.test(\"Response time is less than 3s\",  () => {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(3000);\r",
									"});\r",
									"\r",
									"// check if returned response in json format \r",
									"pm.test(\"verify content-type is in json format\", ()=>{\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).is.eql(\"application/json; charset=utf-8\");\r",
									"});\r",
									"\r",
									"// Parse the response body as JSON\r",
									"var jsonData = pm.response.json();\r",
									"\r",
									"\r",
									"const board_schema = {\r",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"id\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"name\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"desc\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"descData\": {\r",
									"      \"type\": \"null\"\r",
									"    },\r",
									"    \"closed\": {\r",
									"      \"type\": \"boolean\"\r",
									"    },\r",
									"    \"idOrganization\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"idEnterprise\": {\r",
									"      \"type\": \"null\"\r",
									"    },\r",
									"    \"pinned\": {\r",
									"      \"type\": \"boolean\"\r",
									"    },\r",
									"    \"url\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"shortUrl\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"prefs\": {\r",
									"      \"type\": \"object\",\r",
									"      \"properties\": {\r",
									"        \"permissionLevel\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"hideVotes\": {\r",
									"          \"type\": \"boolean\"\r",
									"        },\r",
									"        \"voting\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"comments\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"invitations\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"selfJoin\": {\r",
									"          \"type\": \"boolean\"\r",
									"        },\r",
									"        \"cardCovers\": {\r",
									"          \"type\": \"boolean\"\r",
									"        },\r",
									"        \"cardCounts\": {\r",
									"          \"type\": \"boolean\"\r",
									"        },\r",
									"        \"isTemplate\": {\r",
									"          \"type\": \"boolean\"\r",
									"        },\r",
									"        \"cardAging\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"calendarFeedEnabled\": {\r",
									"          \"type\": \"boolean\"\r",
									"        },\r",
									"        \"hiddenPluginBoardButtons\": {\r",
									"          \"type\": \"array\",\r",
									"          \"items\": {}\r",
									"        },\r",
									"        \"switcherViews\": {\r",
									"          \"type\": \"array\",\r",
									"          \"items\": [\r",
									"            {\r",
									"              \"type\": \"object\",\r",
									"              \"properties\": {\r",
									"                \"viewType\": {\r",
									"                  \"type\": \"string\"\r",
									"                },\r",
									"                \"enabled\": {\r",
									"                  \"type\": \"boolean\"\r",
									"                }\r",
									"              },\r",
									"              \"required\": [\r",
									"                \"viewType\",\r",
									"                \"enabled\"\r",
									"              ]\r",
									"            },\r",
									"            {\r",
									"              \"type\": \"object\",\r",
									"              \"properties\": {\r",
									"                \"viewType\": {\r",
									"                  \"type\": \"string\"\r",
									"                },\r",
									"                \"enabled\": {\r",
									"                  \"type\": \"boolean\"\r",
									"                }\r",
									"              },\r",
									"              \"required\": [\r",
									"                \"viewType\",\r",
									"                \"enabled\"\r",
									"              ]\r",
									"            },\r",
									"            {\r",
									"              \"type\": \"object\",\r",
									"              \"properties\": {\r",
									"                \"viewType\": {\r",
									"                  \"type\": \"string\"\r",
									"                },\r",
									"                \"enabled\": {\r",
									"                  \"type\": \"boolean\"\r",
									"                }\r",
									"              },\r",
									"              \"required\": [\r",
									"                \"viewType\",\r",
									"                \"enabled\"\r",
									"              ]\r",
									"            },\r",
									"            {\r",
									"              \"type\": \"object\",\r",
									"              \"properties\": {\r",
									"                \"viewType\": {\r",
									"                  \"type\": \"string\"\r",
									"                },\r",
									"                \"enabled\": {\r",
									"                  \"type\": \"boolean\"\r",
									"                }\r",
									"              },\r",
									"              \"required\": [\r",
									"                \"viewType\",\r",
									"                \"enabled\"\r",
									"              ]\r",
									"            },\r",
									"            {\r",
									"              \"type\": \"object\",\r",
									"              \"properties\": {\r",
									"                \"viewType\": {\r",
									"                  \"type\": \"string\"\r",
									"                },\r",
									"                \"enabled\": {\r",
									"                  \"type\": \"boolean\"\r",
									"                }\r",
									"              },\r",
									"              \"required\": [\r",
									"                \"viewType\",\r",
									"                \"enabled\"\r",
									"              ]\r",
									"            },\r",
									"            {\r",
									"              \"type\": \"object\",\r",
									"              \"properties\": {\r",
									"                \"viewType\": {\r",
									"                  \"type\": \"string\"\r",
									"                },\r",
									"                \"enabled\": {\r",
									"                  \"type\": \"boolean\"\r",
									"                }\r",
									"              },\r",
									"              \"required\": [\r",
									"                \"viewType\",\r",
									"                \"enabled\"\r",
									"              ]\r",
									"            }\r",
									"          ]\r",
									"        },\r",
									"        \"background\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"backgroundColor\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"backgroundImage\": {\r",
									"          \"type\": \"null\"\r",
									"        },\r",
									"        \"backgroundTile\": {\r",
									"          \"type\": \"boolean\"\r",
									"        },\r",
									"        \"backgroundBrightness\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"backgroundImageScaled\": {\r",
									"          \"type\": \"null\"\r",
									"        },\r",
									"        \"backgroundBottomColor\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"backgroundTopColor\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"canBePublic\": {\r",
									"          \"type\": \"boolean\"\r",
									"        },\r",
									"        \"canBeEnterprise\": {\r",
									"          \"type\": \"boolean\"\r",
									"        },\r",
									"        \"canBeOrg\": {\r",
									"          \"type\": \"boolean\"\r",
									"        },\r",
									"        \"canBePrivate\": {\r",
									"          \"type\": \"boolean\"\r",
									"        },\r",
									"        \"canInvite\": {\r",
									"          \"type\": \"boolean\"\r",
									"        }\r",
									"      },\r",
									"      \"required\": [\r",
									"        \"permissionLevel\",\r",
									"        \"hideVotes\",\r",
									"        \"voting\",\r",
									"        \"comments\",\r",
									"        \"invitations\",\r",
									"        \"selfJoin\",\r",
									"        \"cardCovers\",\r",
									"        \"cardCounts\",\r",
									"        \"isTemplate\",\r",
									"        \"cardAging\",\r",
									"        \"calendarFeedEnabled\",\r",
									"        \"hiddenPluginBoardButtons\",\r",
									"        \"switcherViews\",\r",
									"        \"background\",\r",
									"        \"backgroundColor\",\r",
									"        \"backgroundImage\",\r",
									"        \"backgroundTile\",\r",
									"        \"backgroundBrightness\",\r",
									"        \"backgroundImageScaled\",\r",
									"        \"backgroundBottomColor\",\r",
									"        \"backgroundTopColor\",\r",
									"        \"canBePublic\",\r",
									"        \"canBeEnterprise\",\r",
									"        \"canBeOrg\",\r",
									"        \"canBePrivate\",\r",
									"        \"canInvite\"\r",
									"      ]\r",
									"    },\r",
									"    \"labelNames\": {\r",
									"      \"type\": \"object\",\r",
									"      \"properties\": {\r",
									"        \"green\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"yellow\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"orange\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"red\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"purple\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"blue\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"sky\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"lime\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"pink\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"black\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"green_dark\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"yellow_dark\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"orange_dark\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"red_dark\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"purple_dark\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"blue_dark\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"sky_dark\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"lime_dark\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"pink_dark\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"black_dark\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"green_light\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"yellow_light\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"orange_light\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"red_light\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"purple_light\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"blue_light\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"sky_light\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"lime_light\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"pink_light\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"black_light\": {\r",
									"          \"type\": \"string\"\r",
									"        }\r",
									"      },\r",
									"      \"required\": [\r",
									"        \"green\",\r",
									"        \"yellow\",\r",
									"        \"orange\",\r",
									"        \"red\",\r",
									"        \"purple\",\r",
									"        \"blue\",\r",
									"        \"sky\",\r",
									"        \"lime\",\r",
									"        \"pink\",\r",
									"        \"black\",\r",
									"        \"green_dark\",\r",
									"        \"yellow_dark\",\r",
									"        \"orange_dark\",\r",
									"        \"red_dark\",\r",
									"        \"purple_dark\",\r",
									"        \"blue_dark\",\r",
									"        \"sky_dark\",\r",
									"        \"lime_dark\",\r",
									"        \"pink_dark\",\r",
									"        \"black_dark\",\r",
									"        \"green_light\",\r",
									"        \"yellow_light\",\r",
									"        \"orange_light\",\r",
									"        \"red_light\",\r",
									"        \"purple_light\",\r",
									"        \"blue_light\",\r",
									"        \"sky_light\",\r",
									"        \"lime_light\",\r",
									"        \"pink_light\",\r",
									"        \"black_light\"\r",
									"      ]\r",
									"    },\r",
									"    \"limits\": {\r",
									"      \"type\": \"object\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"id\",\r",
									"    \"name\",\r",
									"    \"desc\",\r",
									"    \"descData\",\r",
									"    \"closed\",\r",
									"    \"idOrganization\",\r",
									"    \"idEnterprise\",\r",
									"    \"pinned\",\r",
									"    \"url\",\r",
									"    \"shortUrl\",\r",
									"    \"prefs\",\r",
									"    \"labelNames\",\r",
									"    \"limits\"\r",
									"  ]\r",
									"}\r",
									"// Perform JSON schema validation\r",
									"const result = tv4.validate(jsonData, board_schema);\r",
									"\r",
									"// Assert the result using Postman test assertions\r",
									"pm.test(\"Validate that JSON schema is correct\", ()=>{\r",
									"    pm.expect(result).to.be.true;\r",
									"});\r",
									"\r",
									"// check name and desc of the created board\r",
									"pm.test(\"verify the name & describtion of board is correct\", ()=>{\r",
									"    pm.expect(jsonData.name).is.eql(pm.collectionVariables.get(\"name\"));\r",
									"    pm.expect(jsonData.desc).is.eql(pm.collectionVariables.get(\"desc\"));\r",
									"\r",
									"});\r",
									"\r",
									"pm.environment.set(\"boardId\",jsonData.id)\r",
									"pm.test(\"verify the id of board isn't null\", ()=>{\r",
									"    pm.expect(jsonData.id).is.not.null;\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{base-url}}/boards/?name={{name}}&key={{APIKey}}&token={{APIToken}}&desc={{desc}}",
							"host": [
								"{{base-url}}"
							],
							"path": [
								"boards",
								""
							],
							"query": [
								{
									"key": "name",
									"value": "{{name}}"
								},
								{
									"key": "key",
									"value": "{{APIKey}}"
								},
								{
									"key": "token",
									"value": "{{APIToken}}"
								},
								{
									"key": "desc",
									"value": "{{desc}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get-Board",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// check status code\r",
									"pm.test(\"Status code is 200\",  () => {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"// check response time\r",
									"pm.test(\"Response time is less than 3s\",  () => {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(3000);\r",
									"});\r",
									"\r",
									"// check if returned response in json format \r",
									"pm.test(\"verify content-type is in JSON format\", ()=>{\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).is.eql(\"application/json; charset=utf-8\");\r",
									"});\r",
									"\r",
									"// Parse the response body as JSON\r",
									"var jsonData = pm.response.json();\r",
									"\r",
									"\r",
									"const board_schema = {\r",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"id\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"name\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"desc\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"descData\": {\r",
									"      \"type\": \"null\"\r",
									"    },\r",
									"    \"closed\": {\r",
									"      \"type\": \"boolean\"\r",
									"    },\r",
									"    \"idOrganization\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"idEnterprise\": {\r",
									"      \"type\": \"null\"\r",
									"    },\r",
									"    \"pinned\": {\r",
									"      \"type\": \"boolean\"\r",
									"    },\r",
									"    \"url\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"shortUrl\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"prefs\": {\r",
									"      \"type\": \"object\",\r",
									"      \"properties\": {\r",
									"        \"permissionLevel\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"hideVotes\": {\r",
									"          \"type\": \"boolean\"\r",
									"        },\r",
									"        \"voting\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"comments\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"invitations\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"selfJoin\": {\r",
									"          \"type\": \"boolean\"\r",
									"        },\r",
									"        \"cardCovers\": {\r",
									"          \"type\": \"boolean\"\r",
									"        },\r",
									"        \"cardCounts\": {\r",
									"          \"type\": \"boolean\"\r",
									"        },\r",
									"        \"isTemplate\": {\r",
									"          \"type\": \"boolean\"\r",
									"        },\r",
									"        \"cardAging\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"calendarFeedEnabled\": {\r",
									"          \"type\": \"boolean\"\r",
									"        },\r",
									"        \"hiddenPluginBoardButtons\": {\r",
									"          \"type\": \"array\",\r",
									"          \"items\": {}\r",
									"        },\r",
									"        \"switcherViews\": {\r",
									"          \"type\": \"array\",\r",
									"          \"items\": [\r",
									"            {\r",
									"              \"type\": \"object\",\r",
									"              \"properties\": {\r",
									"                \"viewType\": {\r",
									"                  \"type\": \"string\"\r",
									"                },\r",
									"                \"enabled\": {\r",
									"                  \"type\": \"boolean\"\r",
									"                }\r",
									"              },\r",
									"              \"required\": [\r",
									"                \"viewType\",\r",
									"                \"enabled\"\r",
									"              ]\r",
									"            },\r",
									"            {\r",
									"              \"type\": \"object\",\r",
									"              \"properties\": {\r",
									"                \"viewType\": {\r",
									"                  \"type\": \"string\"\r",
									"                },\r",
									"                \"enabled\": {\r",
									"                  \"type\": \"boolean\"\r",
									"                }\r",
									"              },\r",
									"              \"required\": [\r",
									"                \"viewType\",\r",
									"                \"enabled\"\r",
									"              ]\r",
									"            },\r",
									"            {\r",
									"              \"type\": \"object\",\r",
									"              \"properties\": {\r",
									"                \"viewType\": {\r",
									"                  \"type\": \"string\"\r",
									"                },\r",
									"                \"enabled\": {\r",
									"                  \"type\": \"boolean\"\r",
									"                }\r",
									"              },\r",
									"              \"required\": [\r",
									"                \"viewType\",\r",
									"                \"enabled\"\r",
									"              ]\r",
									"            },\r",
									"            {\r",
									"              \"type\": \"object\",\r",
									"              \"properties\": {\r",
									"                \"viewType\": {\r",
									"                  \"type\": \"string\"\r",
									"                },\r",
									"                \"enabled\": {\r",
									"                  \"type\": \"boolean\"\r",
									"                }\r",
									"              },\r",
									"              \"required\": [\r",
									"                \"viewType\",\r",
									"                \"enabled\"\r",
									"              ]\r",
									"            },\r",
									"            {\r",
									"              \"type\": \"object\",\r",
									"              \"properties\": {\r",
									"                \"viewType\": {\r",
									"                  \"type\": \"string\"\r",
									"                },\r",
									"                \"enabled\": {\r",
									"                  \"type\": \"boolean\"\r",
									"                }\r",
									"              },\r",
									"              \"required\": [\r",
									"                \"viewType\",\r",
									"                \"enabled\"\r",
									"              ]\r",
									"            },\r",
									"            {\r",
									"              \"type\": \"object\",\r",
									"              \"properties\": {\r",
									"                \"viewType\": {\r",
									"                  \"type\": \"string\"\r",
									"                },\r",
									"                \"enabled\": {\r",
									"                  \"type\": \"boolean\"\r",
									"                }\r",
									"              },\r",
									"              \"required\": [\r",
									"                \"viewType\",\r",
									"                \"enabled\"\r",
									"              ]\r",
									"            }\r",
									"          ]\r",
									"        },\r",
									"        \"background\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"backgroundColor\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"backgroundImage\": {\r",
									"          \"type\": \"null\"\r",
									"        },\r",
									"        \"backgroundTile\": {\r",
									"          \"type\": \"boolean\"\r",
									"        },\r",
									"        \"backgroundBrightness\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"backgroundImageScaled\": {\r",
									"          \"type\": \"null\"\r",
									"        },\r",
									"        \"backgroundBottomColor\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"backgroundTopColor\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"canBePublic\": {\r",
									"          \"type\": \"boolean\"\r",
									"        },\r",
									"        \"canBeEnterprise\": {\r",
									"          \"type\": \"boolean\"\r",
									"        },\r",
									"        \"canBeOrg\": {\r",
									"          \"type\": \"boolean\"\r",
									"        },\r",
									"        \"canBePrivate\": {\r",
									"          \"type\": \"boolean\"\r",
									"        },\r",
									"        \"canInvite\": {\r",
									"          \"type\": \"boolean\"\r",
									"        }\r",
									"      },\r",
									"      \"required\": [\r",
									"        \"permissionLevel\",\r",
									"        \"hideVotes\",\r",
									"        \"voting\",\r",
									"        \"comments\",\r",
									"        \"invitations\",\r",
									"        \"selfJoin\",\r",
									"        \"cardCovers\",\r",
									"        \"cardCounts\",\r",
									"        \"isTemplate\",\r",
									"        \"cardAging\",\r",
									"        \"calendarFeedEnabled\",\r",
									"        \"hiddenPluginBoardButtons\",\r",
									"        \"switcherViews\",\r",
									"        \"background\",\r",
									"        \"backgroundColor\",\r",
									"        \"backgroundImage\",\r",
									"        \"backgroundTile\",\r",
									"        \"backgroundBrightness\",\r",
									"        \"backgroundImageScaled\",\r",
									"        \"backgroundBottomColor\",\r",
									"        \"backgroundTopColor\",\r",
									"        \"canBePublic\",\r",
									"        \"canBeEnterprise\",\r",
									"        \"canBeOrg\",\r",
									"        \"canBePrivate\",\r",
									"        \"canInvite\"\r",
									"      ]\r",
									"    },\r",
									"    \"labelNames\": {\r",
									"      \"type\": \"object\",\r",
									"      \"properties\": {\r",
									"        \"green\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"yellow\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"orange\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"red\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"purple\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"blue\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"sky\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"lime\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"pink\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"black\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"green_dark\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"yellow_dark\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"orange_dark\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"red_dark\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"purple_dark\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"blue_dark\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"sky_dark\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"lime_dark\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"pink_dark\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"black_dark\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"green_light\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"yellow_light\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"orange_light\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"red_light\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"purple_light\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"blue_light\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"sky_light\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"lime_light\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"pink_light\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"black_light\": {\r",
									"          \"type\": \"string\"\r",
									"        }\r",
									"      },\r",
									"      \"required\": [\r",
									"        \"green\",\r",
									"        \"yellow\",\r",
									"        \"orange\",\r",
									"        \"red\",\r",
									"        \"purple\",\r",
									"        \"blue\",\r",
									"        \"sky\",\r",
									"        \"lime\",\r",
									"        \"pink\",\r",
									"        \"black\",\r",
									"        \"green_dark\",\r",
									"        \"yellow_dark\",\r",
									"        \"orange_dark\",\r",
									"        \"red_dark\",\r",
									"        \"purple_dark\",\r",
									"        \"blue_dark\",\r",
									"        \"sky_dark\",\r",
									"        \"lime_dark\",\r",
									"        \"pink_dark\",\r",
									"        \"black_dark\",\r",
									"        \"green_light\",\r",
									"        \"yellow_light\",\r",
									"        \"orange_light\",\r",
									"        \"red_light\",\r",
									"        \"purple_light\",\r",
									"        \"blue_light\",\r",
									"        \"sky_light\",\r",
									"        \"lime_light\",\r",
									"        \"pink_light\",\r",
									"        \"black_light\"\r",
									"      ]\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"id\",\r",
									"    \"name\",\r",
									"    \"desc\",\r",
									"    \"descData\",\r",
									"    \"closed\",\r",
									"    \"idOrganization\",\r",
									"    \"idEnterprise\",\r",
									"    \"pinned\",\r",
									"    \"url\",\r",
									"    \"shortUrl\",\r",
									"    \"prefs\",\r",
									"    \"labelNames\"\r",
									"  ]\r",
									"};\r",
									"// Perform JSON schema validation\r",
									"const result = tv4.validate(jsonData, board_schema);\r",
									"\r",
									"// Assert the result using Postman test assertions\r",
									"pm.test(\"Validate that JSON schema is correct\", ()=>{\r",
									"    pm.expect(result).to.be.true;\r",
									"});\r",
									"\r",
									"// check name and desc of the created board\r",
									"pm.test(\"verify the name & describtion of board is correct\", ()=>{\r",
									"    pm.expect(jsonData.name).is.eql(pm.collectionVariables.get(\"name\"));\r",
									"    pm.expect(jsonData.desc).is.eql(pm.collectionVariables.get(\"desc\"));\r",
									"\r",
									"});\r",
									"\r",
									"// check the board id\r",
									"pm.test(\"validate the board ID\", ()=>{\r",
									"    pm.expect(jsonData.id).is.eql(pm.environment.get(\"boardId\"));\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{base-url}}/boards/{{boardId}}?key={{APIKey}}&token={{APIToken}}",
							"host": [
								"{{base-url}}"
							],
							"path": [
								"boards",
								"{{boardId}}"
							],
							"query": [
								{
									"key": "key",
									"value": "{{APIKey}}"
								},
								{
									"key": "token",
									"value": "{{APIToken}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Update-Board",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.collectionVariables.set(\"name\",\"TeamBoard\");\r",
									"pm.collectionVariables.set(\"desc\",\"TeamBoard : Testing Trello api create board endpoint\");\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"// check status code\r",
									"pm.test(\"Status code is 200\",  () => {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"// check response time\r",
									"pm.test(\"Response time is less than 3s\",  () => {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(3000);\r",
									"});\r",
									"\r",
									"// check if returned response in json format \r",
									"pm.test(\"verify content-type is in JSON format\", ()=>{\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).is.eql(\"application/json; charset=utf-8\");\r",
									"});\r",
									"\r",
									"// Parse the response body as JSON\r",
									"var jsonData = pm.response.json();\r",
									"\r",
									"\r",
									"const board_schema = {\r",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"id\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"name\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"desc\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"descData\": {\r",
									"      \"type\": \"object\",\r",
									"      \"properties\": {\r",
									"        \"emoji\": {\r",
									"          \"type\": \"object\"\r",
									"        }\r",
									"      },\r",
									"      \"required\": [\r",
									"        \"emoji\"\r",
									"      ]\r",
									"    },\r",
									"    \"closed\": {\r",
									"      \"type\": \"boolean\"\r",
									"    },\r",
									"    \"idOrganization\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"idEnterprise\": {\r",
									"      \"type\": \"null\"\r",
									"    },\r",
									"    \"pinned\": {\r",
									"      \"type\": \"boolean\"\r",
									"    },\r",
									"    \"url\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"shortUrl\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"prefs\": {\r",
									"      \"type\": \"object\",\r",
									"      \"properties\": {\r",
									"        \"permissionLevel\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"hideVotes\": {\r",
									"          \"type\": \"boolean\"\r",
									"        },\r",
									"        \"voting\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"comments\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"invitations\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"selfJoin\": {\r",
									"          \"type\": \"boolean\"\r",
									"        },\r",
									"        \"cardCovers\": {\r",
									"          \"type\": \"boolean\"\r",
									"        },\r",
									"        \"cardCounts\": {\r",
									"          \"type\": \"boolean\"\r",
									"        },\r",
									"        \"isTemplate\": {\r",
									"          \"type\": \"boolean\"\r",
									"        },\r",
									"        \"cardAging\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"calendarFeedEnabled\": {\r",
									"          \"type\": \"boolean\"\r",
									"        },\r",
									"        \"hiddenPluginBoardButtons\": {\r",
									"          \"type\": \"array\",\r",
									"          \"items\": {}\r",
									"        },\r",
									"        \"switcherViews\": {\r",
									"          \"type\": \"array\",\r",
									"          \"items\": [\r",
									"            {\r",
									"              \"type\": \"object\",\r",
									"              \"properties\": {\r",
									"                \"viewType\": {\r",
									"                  \"type\": \"string\"\r",
									"                },\r",
									"                \"enabled\": {\r",
									"                  \"type\": \"boolean\"\r",
									"                }\r",
									"              },\r",
									"              \"required\": [\r",
									"                \"viewType\",\r",
									"                \"enabled\"\r",
									"              ]\r",
									"            },\r",
									"            {\r",
									"              \"type\": \"object\",\r",
									"              \"properties\": {\r",
									"                \"viewType\": {\r",
									"                  \"type\": \"string\"\r",
									"                },\r",
									"                \"enabled\": {\r",
									"                  \"type\": \"boolean\"\r",
									"                }\r",
									"              },\r",
									"              \"required\": [\r",
									"                \"viewType\",\r",
									"                \"enabled\"\r",
									"              ]\r",
									"            },\r",
									"            {\r",
									"              \"type\": \"object\",\r",
									"              \"properties\": {\r",
									"                \"viewType\": {\r",
									"                  \"type\": \"string\"\r",
									"                },\r",
									"                \"enabled\": {\r",
									"                  \"type\": \"boolean\"\r",
									"                }\r",
									"              },\r",
									"              \"required\": [\r",
									"                \"viewType\",\r",
									"                \"enabled\"\r",
									"              ]\r",
									"            },\r",
									"            {\r",
									"              \"type\": \"object\",\r",
									"              \"properties\": {\r",
									"                \"viewType\": {\r",
									"                  \"type\": \"string\"\r",
									"                },\r",
									"                \"enabled\": {\r",
									"                  \"type\": \"boolean\"\r",
									"                }\r",
									"              },\r",
									"              \"required\": [\r",
									"                \"viewType\",\r",
									"                \"enabled\"\r",
									"              ]\r",
									"            },\r",
									"            {\r",
									"              \"type\": \"object\",\r",
									"              \"properties\": {\r",
									"                \"viewType\": {\r",
									"                  \"type\": \"string\"\r",
									"                },\r",
									"                \"enabled\": {\r",
									"                  \"type\": \"boolean\"\r",
									"                }\r",
									"              },\r",
									"              \"required\": [\r",
									"                \"viewType\",\r",
									"                \"enabled\"\r",
									"              ]\r",
									"            },\r",
									"            {\r",
									"              \"type\": \"object\",\r",
									"              \"properties\": {\r",
									"                \"viewType\": {\r",
									"                  \"type\": \"string\"\r",
									"                },\r",
									"                \"enabled\": {\r",
									"                  \"type\": \"boolean\"\r",
									"                }\r",
									"              },\r",
									"              \"required\": [\r",
									"                \"viewType\",\r",
									"                \"enabled\"\r",
									"              ]\r",
									"            }\r",
									"          ]\r",
									"        },\r",
									"        \"background\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"backgroundColor\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"backgroundImage\": {\r",
									"          \"type\": \"null\"\r",
									"        },\r",
									"        \"backgroundTile\": {\r",
									"          \"type\": \"boolean\"\r",
									"        },\r",
									"        \"backgroundBrightness\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"backgroundImageScaled\": {\r",
									"          \"type\": \"null\"\r",
									"        },\r",
									"        \"backgroundBottomColor\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"backgroundTopColor\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"canBePublic\": {\r",
									"          \"type\": \"boolean\"\r",
									"        },\r",
									"        \"canBeEnterprise\": {\r",
									"          \"type\": \"boolean\"\r",
									"        },\r",
									"        \"canBeOrg\": {\r",
									"          \"type\": \"boolean\"\r",
									"        },\r",
									"        \"canBePrivate\": {\r",
									"          \"type\": \"boolean\"\r",
									"        },\r",
									"        \"canInvite\": {\r",
									"          \"type\": \"boolean\"\r",
									"        }\r",
									"      },\r",
									"      \"required\": [\r",
									"        \"permissionLevel\",\r",
									"        \"hideVotes\",\r",
									"        \"voting\",\r",
									"        \"comments\",\r",
									"        \"invitations\",\r",
									"        \"selfJoin\",\r",
									"        \"cardCovers\",\r",
									"        \"cardCounts\",\r",
									"        \"isTemplate\",\r",
									"        \"cardAging\",\r",
									"        \"calendarFeedEnabled\",\r",
									"        \"hiddenPluginBoardButtons\",\r",
									"        \"switcherViews\",\r",
									"        \"background\",\r",
									"        \"backgroundColor\",\r",
									"        \"backgroundImage\",\r",
									"        \"backgroundTile\",\r",
									"        \"backgroundBrightness\",\r",
									"        \"backgroundImageScaled\",\r",
									"        \"backgroundBottomColor\",\r",
									"        \"backgroundTopColor\",\r",
									"        \"canBePublic\",\r",
									"        \"canBeEnterprise\",\r",
									"        \"canBeOrg\",\r",
									"        \"canBePrivate\",\r",
									"        \"canInvite\"\r",
									"      ]\r",
									"    },\r",
									"    \"labelNames\": {\r",
									"      \"type\": \"object\",\r",
									"      \"properties\": {\r",
									"        \"green\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"yellow\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"orange\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"red\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"purple\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"blue\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"sky\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"lime\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"pink\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"black\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"green_dark\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"yellow_dark\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"orange_dark\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"red_dark\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"purple_dark\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"blue_dark\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"sky_dark\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"lime_dark\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"pink_dark\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"black_dark\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"green_light\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"yellow_light\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"orange_light\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"red_light\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"purple_light\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"blue_light\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"sky_light\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"lime_light\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"pink_light\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"black_light\": {\r",
									"          \"type\": \"string\"\r",
									"        }\r",
									"      },\r",
									"      \"required\": [\r",
									"        \"green\",\r",
									"        \"yellow\",\r",
									"        \"orange\",\r",
									"        \"red\",\r",
									"        \"purple\",\r",
									"        \"blue\",\r",
									"        \"sky\",\r",
									"        \"lime\",\r",
									"        \"pink\",\r",
									"        \"black\",\r",
									"        \"green_dark\",\r",
									"        \"yellow_dark\",\r",
									"        \"orange_dark\",\r",
									"        \"red_dark\",\r",
									"        \"purple_dark\",\r",
									"        \"blue_dark\",\r",
									"        \"sky_dark\",\r",
									"        \"lime_dark\",\r",
									"        \"pink_dark\",\r",
									"        \"black_dark\",\r",
									"        \"green_light\",\r",
									"        \"yellow_light\",\r",
									"        \"orange_light\",\r",
									"        \"red_light\",\r",
									"        \"purple_light\",\r",
									"        \"blue_light\",\r",
									"        \"sky_light\",\r",
									"        \"lime_light\",\r",
									"        \"pink_light\",\r",
									"        \"black_light\"\r",
									"      ]\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"id\",\r",
									"    \"name\",\r",
									"    \"desc\",\r",
									"    \"descData\",\r",
									"    \"closed\",\r",
									"    \"idOrganization\",\r",
									"    \"idEnterprise\",\r",
									"    \"pinned\",\r",
									"    \"url\",\r",
									"    \"shortUrl\",\r",
									"    \"prefs\",\r",
									"    \"labelNames\"\r",
									"  ]\r",
									"};\r",
									"// Perform JSON schema validation\r",
									"const result = tv4.validate(jsonData, board_schema);\r",
									"\r",
									"// Assert the result using Postman test assertions\r",
									"pm.test(\"Validate that JSON schema is correct\", ()=>{\r",
									"    pm.expect(result).to.be.true;\r",
									"});\r",
									"\r",
									"// check name and desc of the created board\r",
									"pm.test(\"verify the name & describtion of board is correct\", ()=>{\r",
									"    pm.expect(jsonData.name).is.eql(pm.collectionVariables.get(\"name\"));\r",
									"    pm.expect(jsonData.desc).is.eql(pm.collectionVariables.get(\"desc\"));\r",
									"\r",
									"});\r",
									"\r",
									"// check the board id\r",
									"pm.test(\"validate the board ID\", ()=>{\r",
									"    pm.expect(jsonData.id).is.eql(pm.environment.get(\"boardId\"));\r",
									"});\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"url": {
							"raw": "{{base-url}}/boards/{{boardId}}?key={{APIKey}}&token={{APIToken}}&name={{name}}&desc={{desc}}",
							"host": [
								"{{base-url}}"
							],
							"path": [
								"boards",
								"{{boardId}}"
							],
							"query": [
								{
									"key": "key",
									"value": "{{APIKey}}"
								},
								{
									"key": "token",
									"value": "{{APIToken}}"
								},
								{
									"key": "name",
									"value": "{{name}}"
								},
								{
									"key": "desc",
									"value": "{{desc}}"
								},
								{
									"key": "closed",
									"value": "1",
									"disabled": true
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "List",
			"item": [
				{
					"name": "Create-List",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const randomList = 'List' + Math.floor(Math.random() * 1000);\r",
									"pm.collectionVariables.set(\"listName\",randomList);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"// check status code\r",
									"pm.test(\"Status code is 200\",  () => {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"// check response time\r",
									"pm.test(\"Response time is less than 3s\",  () => {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(3000);\r",
									"});\r",
									"\r",
									"// check if returned response in json format \r",
									"pm.test(\"verify content-type is in json format\", ()=>{\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).is.eql(\"application/json; charset=utf-8\");\r",
									"});\r",
									"\r",
									"// Parse the response body as JSON\r",
									"var jsonData = pm.response.json();\r",
									"\r",
									"\r",
									"const list_schema ={\r",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"id\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"name\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"closed\": {\r",
									"      \"type\": \"boolean\"\r",
									"    },\r",
									"    \"color\": {\r",
									"      \"type\": \"null\"\r",
									"    },\r",
									"    \"idBoard\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"pos\": {\r",
									"      \"type\": \"integer\"\r",
									"    },\r",
									"    \"limits\": {\r",
									"      \"type\": \"object\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"id\",\r",
									"    \"name\",\r",
									"    \"closed\",\r",
									"    \"color\",\r",
									"    \"idBoard\",\r",
									"    \"pos\",\r",
									"    \"limits\"\r",
									"  ]\r",
									"}\r",
									"// Perform JSON schema validation\r",
									"const result = tv4.validate(jsonData, list_schema);\r",
									"\r",
									"// Assert the result using Postman test assertions\r",
									"pm.test(\"Validate that JSON schema is correct\", ()=>{\r",
									"    pm.expect(result).to.be.true;\r",
									"});\r",
									"\r",
									"// check name of the created list\r",
									"pm.test(\"verify the name of list is correct\", ()=>{\r",
									"    pm.expect(jsonData.name).is.eql(pm.collectionVariables.get(\"listName\"));\r",
									"\r",
									"});\r",
									"\r",
									"// check id of the board\r",
									"pm.test(\"verify the id of board is correct\", ()=>{\r",
									"    pm.expect(jsonData.idBoard).is.eql(pm.environment.get(\"boardId\"));\r",
									"\r",
									"});\r",
									"\r",
									"// check List id isn't null\r",
									"pm.test(\"verify the id of List isn't null\", ()=>{\r",
									"    pm.expect(jsonData.id).is.not.null;\r",
									"});\r",
									"// set listId \r",
									"pm.environment.set(\"listId\",jsonData.id);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{base-url}}/lists?name={{listName}}&idBoard={{boardId}}&key={{APIKey}}&token={{APIToken}}",
							"host": [
								"{{base-url}}"
							],
							"path": [
								"lists"
							],
							"query": [
								{
									"key": "name",
									"value": "{{listName}}"
								},
								{
									"key": "idBoard",
									"value": "{{boardId}}"
								},
								{
									"key": "key",
									"value": "{{APIKey}}"
								},
								{
									"key": "token",
									"value": "{{APIToken}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get-List",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// check status code\r",
									"pm.test(\"Status code is 200\",  () => {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"// check response time\r",
									"pm.test(\"Response time is less than 3s\",  () => {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(3000);\r",
									"});\r",
									"\r",
									"// check if returned response in json format \r",
									"pm.test(\"verify content-type is in json format\", ()=>{\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).is.eql(\"application/json; charset=utf-8\");\r",
									"});\r",
									"\r",
									"// Parse the response body as JSON\r",
									"var jsonData = pm.response.json();\r",
									"\r",
									"\r",
									"const list_schema ={\r",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"id\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"name\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"closed\": {\r",
									"      \"type\": \"boolean\"\r",
									"    },\r",
									"    \"color\": {\r",
									"      \"type\": \"null\"\r",
									"    },\r",
									"    \"idBoard\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"pos\": {\r",
									"      \"type\": \"integer\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"id\",\r",
									"    \"name\",\r",
									"    \"closed\",\r",
									"    \"color\",\r",
									"    \"idBoard\",\r",
									"    \"pos\"\r",
									"  ]\r",
									"}\r",
									"// Perform JSON schema validation\r",
									"const result = tv4.validate(jsonData, list_schema);\r",
									"\r",
									"// Assert the result using Postman test assertions\r",
									"pm.test(\"Validate that JSON schema is correct\", ()=>{\r",
									"    pm.expect(result).to.be.true;\r",
									"});\r",
									"\r",
									"// check name of the created list\r",
									"pm.test(\"verify the name of list is correct\", ()=>{\r",
									"    pm.expect(jsonData.name).is.eql(pm.collectionVariables.get(\"listName\"));\r",
									"\r",
									"});\r",
									"\r",
									"// check id of the board\r",
									"pm.test(\"verify the id of board is correct\", ()=>{\r",
									"    pm.expect(jsonData.idBoard).is.eql(pm.environment.get(\"boardId\"));\r",
									"\r",
									"});\r",
									"\r",
									"// check List id is correct\r",
									"pm.test(\"verify the id of List is correct\", ()=>{\r",
									"    pm.expect(jsonData.id).is.eql(pm.environment.get(\"listId\"));\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base-url}}/lists/{{listId}}?key={{APIKey}}&token={{APIToken}}",
							"host": [
								"{{base-url}}"
							],
							"path": [
								"lists",
								"{{listId}}"
							],
							"query": [
								{
									"key": "key",
									"value": "{{APIKey}}"
								},
								{
									"key": "token",
									"value": "{{APIToken}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Update-List",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"// check status code\r",
									"pm.test(\"Status code is 200\",  () => {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"// check response time\r",
									"pm.test(\"Response time is less than 3s\",  () => {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(3000);\r",
									"});\r",
									"\r",
									"// check if returned response in json format \r",
									"pm.test(\"verify content-type is in json format\", ()=>{\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).is.eql(\"application/json; charset=utf-8\");\r",
									"});\r",
									"\r",
									"// Parse the response body as JSON\r",
									"var jsonData = pm.response.json();\r",
									"\r",
									"\r",
									"const list_schema ={\r",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"id\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"name\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"closed\": {\r",
									"      \"type\": \"boolean\"\r",
									"    },\r",
									"    \"color\": {\r",
									"      \"type\": \"null\"\r",
									"    },\r",
									"    \"idBoard\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"pos\": {\r",
									"      \"type\": \"integer\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"id\",\r",
									"    \"name\",\r",
									"    \"closed\",\r",
									"    \"color\",\r",
									"    \"idBoard\",\r",
									"    \"pos\"\r",
									"  ]\r",
									"}\r",
									"// Perform JSON schema validation\r",
									"const result = tv4.validate(jsonData, list_schema);\r",
									"\r",
									"// Assert the result using Postman test assertions\r",
									"pm.test(\"Validate that JSON schema is correct\", ()=>{\r",
									"    pm.expect(result).to.be.true;\r",
									"});\r",
									"\r",
									"// // check name of the created list\r",
									"// pm.test(\"verify the name of list is correct\", ()=>{\r",
									"//     pm.expect(jsonData.name).is.eql(pm.collectionVariables.get(\"name\"));\r",
									"\r",
									"// });\r",
									"\r",
									"// check id of the board\r",
									"pm.test(\"verify the id of board is correct\", ()=>{\r",
									"    pm.expect(jsonData.idBoard).is.eql(pm.environment.get(\"boardId\"));\r",
									"\r",
									"});\r",
									"\r",
									"// check List id is correct\r",
									"pm.test(\"verify the id of List is correct\", ()=>{\r",
									"    pm.expect(jsonData.id).is.eql(pm.environment.get(\"listId\"));\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"url": {
							"raw": "{{base-url}}/lists/{{listId}}?key={{APIKey}}&token={{APIToken}}&name=updatedList&closed=false",
							"host": [
								"{{base-url}}"
							],
							"path": [
								"lists",
								"{{listId}}"
							],
							"query": [
								{
									"key": "key",
									"value": "{{APIKey}}"
								},
								{
									"key": "token",
									"value": "{{APIToken}}"
								},
								{
									"key": "name",
									"value": "updatedList"
								},
								{
									"key": "closed",
									"value": "false"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Card",
			"item": [
				{
					"name": "Create-Card",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const card_schema={\r",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"id\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"badges\": {\r",
									"      \"type\": \"object\",\r",
									"      \"properties\": {\r",
									"        \"attachmentsByType\": {\r",
									"          \"type\": \"object\",\r",
									"          \"properties\": {\r",
									"            \"trello\": {\r",
									"              \"type\": \"object\",\r",
									"              \"properties\": {\r",
									"                \"board\": {\r",
									"                  \"type\": \"integer\"\r",
									"                },\r",
									"                \"card\": {\r",
									"                  \"type\": \"integer\"\r",
									"                }\r",
									"              },\r",
									"              \"required\": [\r",
									"                \"board\",\r",
									"                \"card\"\r",
									"              ]\r",
									"            }\r",
									"          },\r",
									"          \"required\": [\r",
									"            \"trello\"\r",
									"          ]\r",
									"        },\r",
									"        \"location\": {\r",
									"          \"type\": \"boolean\"\r",
									"        },\r",
									"        \"votes\": {\r",
									"          \"type\": \"integer\"\r",
									"        },\r",
									"        \"viewingMemberVoted\": {\r",
									"          \"type\": \"boolean\"\r",
									"        },\r",
									"        \"subscribed\": {\r",
									"          \"type\": \"boolean\"\r",
									"        },\r",
									"        \"fogbugz\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"checkItems\": {\r",
									"          \"type\": \"integer\"\r",
									"        },\r",
									"        \"checkItemsChecked\": {\r",
									"          \"type\": \"integer\"\r",
									"        },\r",
									"        \"checkItemsEarliestDue\": {\r",
									"          \"type\": \"null\"\r",
									"        },\r",
									"        \"comments\": {\r",
									"          \"type\": \"integer\"\r",
									"        },\r",
									"        \"attachments\": {\r",
									"          \"type\": \"integer\"\r",
									"        },\r",
									"        \"description\": {\r",
									"          \"type\": \"boolean\"\r",
									"        },\r",
									"        \"due\": {\r",
									"          \"type\": \"null\"\r",
									"        },\r",
									"        \"dueComplete\": {\r",
									"          \"type\": \"boolean\"\r",
									"        },\r",
									"        \"start\": {\r",
									"          \"type\": \"null\"\r",
									"        }\r",
									"      },\r",
									"      \"required\": [\r",
									"        \"attachmentsByType\",\r",
									"        \"location\",\r",
									"        \"votes\",\r",
									"        \"viewingMemberVoted\",\r",
									"        \"subscribed\",\r",
									"        \"fogbugz\",\r",
									"        \"checkItems\",\r",
									"        \"checkItemsChecked\",\r",
									"        \"checkItemsEarliestDue\",\r",
									"        \"comments\",\r",
									"        \"attachments\",\r",
									"        \"description\",\r",
									"        \"due\",\r",
									"        \"dueComplete\",\r",
									"        \"start\"\r",
									"      ]\r",
									"    },\r",
									"    \"checkItemStates\": {\r",
									"      \"type\": \"array\",\r",
									"      \"items\": {}\r",
									"    },\r",
									"    \"closed\": {\r",
									"      \"type\": \"boolean\"\r",
									"    },\r",
									"    \"dueComplete\": {\r",
									"      \"type\": \"boolean\"\r",
									"    },\r",
									"    \"dateLastActivity\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"desc\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"descData\": {\r",
									"      \"type\": \"object\",\r",
									"      \"properties\": {\r",
									"        \"emoji\": {\r",
									"          \"type\": \"object\"\r",
									"        }\r",
									"      },\r",
									"      \"required\": [\r",
									"        \"emoji\"\r",
									"      ]\r",
									"    },\r",
									"    \"due\": {\r",
									"      \"type\": \"null\"\r",
									"    },\r",
									"    \"dueReminder\": {\r",
									"      \"type\": \"null\"\r",
									"    },\r",
									"    \"email\": {\r",
									"      \"type\": \"null\"\r",
									"    },\r",
									"    \"idBoard\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"idChecklists\": {\r",
									"      \"type\": \"array\",\r",
									"      \"items\": {}\r",
									"    },\r",
									"    \"idList\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"idMembers\": {\r",
									"      \"type\": \"array\",\r",
									"      \"items\": {}\r",
									"    },\r",
									"    \"idMembersVoted\": {\r",
									"      \"type\": \"array\",\r",
									"      \"items\": {}\r",
									"    },\r",
									"    \"idShort\": {\r",
									"      \"type\": \"integer\"\r",
									"    },\r",
									"    \"idAttachmentCover\": {\r",
									"      \"type\": \"null\"\r",
									"    },\r",
									"    \"labels\": {\r",
									"      \"type\": \"array\",\r",
									"      \"items\": {}\r",
									"    },\r",
									"    \"idLabels\": {\r",
									"      \"type\": \"array\",\r",
									"      \"items\": {}\r",
									"    },\r",
									"    \"manualCoverAttachment\": {\r",
									"      \"type\": \"boolean\"\r",
									"    },\r",
									"    \"name\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"pos\": {\r",
									"      \"type\": \"integer\"\r",
									"    },\r",
									"    \"shortLink\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"shortUrl\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"start\": {\r",
									"      \"type\": \"null\"\r",
									"    },\r",
									"    \"subscribed\": {\r",
									"      \"type\": \"boolean\"\r",
									"    },\r",
									"    \"url\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"cover\": {\r",
									"      \"type\": \"object\",\r",
									"      \"properties\": {\r",
									"        \"idAttachment\": {\r",
									"          \"type\": \"null\"\r",
									"        },\r",
									"        \"color\": {\r",
									"          \"type\": \"null\"\r",
									"        },\r",
									"        \"idUploadedBackground\": {\r",
									"          \"type\": \"null\"\r",
									"        },\r",
									"        \"size\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"brightness\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"idPlugin\": {\r",
									"          \"type\": \"null\"\r",
									"        }\r",
									"      },\r",
									"      \"required\": [\r",
									"        \"idAttachment\",\r",
									"        \"color\",\r",
									"        \"idUploadedBackground\",\r",
									"        \"size\",\r",
									"        \"brightness\",\r",
									"        \"idPlugin\"\r",
									"      ]\r",
									"    },\r",
									"    \"isTemplate\": {\r",
									"      \"type\": \"boolean\"\r",
									"    },\r",
									"    \"cardRole\": {\r",
									"      \"type\": \"null\"\r",
									"    },\r",
									"    \"attachments\": {\r",
									"      \"type\": \"array\",\r",
									"      \"items\": {}\r",
									"    },\r",
									"    \"stickers\": {\r",
									"      \"type\": \"array\",\r",
									"      \"items\": {}\r",
									"    },\r",
									"    \"limits\": {\r",
									"      \"type\": \"object\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"id\",\r",
									"    \"badges\",\r",
									"    \"checkItemStates\",\r",
									"    \"closed\",\r",
									"    \"dueComplete\",\r",
									"    \"dateLastActivity\",\r",
									"    \"desc\",\r",
									"    \"descData\",\r",
									"    \"due\",\r",
									"    \"dueReminder\",\r",
									"    \"email\",\r",
									"    \"idBoard\",\r",
									"    \"idChecklists\",\r",
									"    \"idList\",\r",
									"    \"idMembers\",\r",
									"    \"idMembersVoted\",\r",
									"    \"idShort\",\r",
									"    \"idAttachmentCover\",\r",
									"    \"labels\",\r",
									"    \"idLabels\",\r",
									"    \"manualCoverAttachment\",\r",
									"    \"name\",\r",
									"    \"pos\",\r",
									"    \"shortLink\",\r",
									"    \"shortUrl\",\r",
									"    \"start\",\r",
									"    \"subscribed\",\r",
									"    \"url\",\r",
									"    \"cover\",\r",
									"    \"isTemplate\",\r",
									"    \"cardRole\",\r",
									"    \"attachments\",\r",
									"    \"stickers\",\r",
									"    \"limits\"\r",
									"  ]\r",
									"};\r",
									"\r",
									"// check status code\r",
									"pm.test(\"Status code is 200\",  () => {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"// check response time\r",
									"pm.test(\"Response time is less than 3s\",  () => {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(3000);\r",
									"});\r",
									"\r",
									"// check if returned response in json format \r",
									"pm.test(\"verify content-type is in json format\", ()=>{\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).is.eql(\"application/json; charset=utf-8\");\r",
									"});\r",
									"\r",
									"// Parse the response body as JSON\r",
									"var jsonData = pm.response.json();\r",
									"\r",
									"\r",
									"\r",
									"// Perform JSON schema validation\r",
									"const result = tv4.validate(jsonData, card_schema);\r",
									"\r",
									"// Assert the result using Postman test assertions\r",
									"pm.test(\"Validate that JSON schema is correct\", ()=>{\r",
									"    pm.expect(result).to.be.true;\r",
									"});\r",
									"\r",
									"// check name of the created card\r",
									"pm.test(\"verify the name of card is correct\", ()=>{\r",
									"    pm.expect(jsonData.name).is.eql(pm.collectionVariables.get(\"cardName\"));\r",
									"\r",
									"});\r",
									"\r",
									"// check id of the board\r",
									"pm.test(\"verify the id of board & list is correct\", ()=>{\r",
									"    pm.expect(jsonData.idBoard).is.eql(pm.environment.get(\"boardId\"));\r",
									"    pm.expect(jsonData.idList).is.eql(pm.environment.get(\"listId\"));\r",
									"\r",
									"\r",
									"});\r",
									"\r",
									"// check Card id isn't null\r",
									"pm.test(\"verify the id of Card isn't null\", ()=>{\r",
									"    pm.expect(jsonData.id).is.not.null;\r",
									"});\r",
									"// set cardId \r",
									"pm.environment.set(\"cardId\",jsonData.id)\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const randomCard = 'Card' + Math.floor(Math.random() * 1000);\r",
									"pm.collectionVariables.set(\"cardName\",randomCard);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{base-url}}/cards?idList={{listId}}&key={{APIKey}}&token={{APIToken}}&name={{cardName}}",
							"host": [
								"{{base-url}}"
							],
							"path": [
								"cards"
							],
							"query": [
								{
									"key": "idList",
									"value": "{{listId}}"
								},
								{
									"key": "key",
									"value": "{{APIKey}}"
								},
								{
									"key": "token",
									"value": "{{APIToken}}"
								},
								{
									"key": "name",
									"value": "{{cardName}}"
								},
								{
									"key": "idBoard",
									"value": "0",
									"disabled": true
								},
								{
									"key": "closed",
									"value": "true",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get-Card",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const card_schema={\r",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"id\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"badges\": {\r",
									"      \"type\": \"object\",\r",
									"      \"properties\": {\r",
									"        \"attachmentsByType\": {\r",
									"          \"type\": \"object\",\r",
									"          \"properties\": {\r",
									"            \"trello\": {\r",
									"              \"type\": \"object\",\r",
									"              \"properties\": {\r",
									"                \"board\": {\r",
									"                  \"type\": \"integer\"\r",
									"                },\r",
									"                \"card\": {\r",
									"                  \"type\": \"integer\"\r",
									"                }\r",
									"              },\r",
									"              \"required\": [\r",
									"                \"board\",\r",
									"                \"card\"\r",
									"              ]\r",
									"            }\r",
									"          },\r",
									"          \"required\": [\r",
									"            \"trello\"\r",
									"          ]\r",
									"        },\r",
									"        \"location\": {\r",
									"          \"type\": \"boolean\"\r",
									"        },\r",
									"        \"votes\": {\r",
									"          \"type\": \"integer\"\r",
									"        },\r",
									"        \"viewingMemberVoted\": {\r",
									"          \"type\": \"boolean\"\r",
									"        },\r",
									"        \"subscribed\": {\r",
									"          \"type\": \"boolean\"\r",
									"        },\r",
									"        \"fogbugz\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"checkItems\": {\r",
									"          \"type\": \"integer\"\r",
									"        },\r",
									"        \"checkItemsChecked\": {\r",
									"          \"type\": \"integer\"\r",
									"        },\r",
									"        \"checkItemsEarliestDue\": {\r",
									"          \"type\": \"null\"\r",
									"        },\r",
									"        \"comments\": {\r",
									"          \"type\": \"integer\"\r",
									"        },\r",
									"        \"attachments\": {\r",
									"          \"type\": \"integer\"\r",
									"        },\r",
									"        \"description\": {\r",
									"          \"type\": \"boolean\"\r",
									"        },\r",
									"        \"due\": {\r",
									"          \"type\": \"null\"\r",
									"        },\r",
									"        \"dueComplete\": {\r",
									"          \"type\": \"boolean\"\r",
									"        },\r",
									"        \"start\": {\r",
									"          \"type\": \"null\"\r",
									"        }\r",
									"      },\r",
									"      \"required\": [\r",
									"        \"attachmentsByType\",\r",
									"        \"location\",\r",
									"        \"votes\",\r",
									"        \"viewingMemberVoted\",\r",
									"        \"subscribed\",\r",
									"        \"fogbugz\",\r",
									"        \"checkItems\",\r",
									"        \"checkItemsChecked\",\r",
									"        \"checkItemsEarliestDue\",\r",
									"        \"comments\",\r",
									"        \"attachments\",\r",
									"        \"description\",\r",
									"        \"due\",\r",
									"        \"dueComplete\",\r",
									"        \"start\"\r",
									"      ]\r",
									"    },\r",
									"    \"checkItemStates\": {\r",
									"      \"type\": \"array\",\r",
									"      \"items\": {}\r",
									"    },\r",
									"    \"closed\": {\r",
									"      \"type\": \"boolean\"\r",
									"    },\r",
									"    \"dueComplete\": {\r",
									"      \"type\": \"boolean\"\r",
									"    },\r",
									"    \"dateLastActivity\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"desc\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"descData\": {\r",
									"      \"type\": \"object\",\r",
									"      \"properties\": {\r",
									"        \"emoji\": {\r",
									"          \"type\": \"object\"\r",
									"        }\r",
									"      },\r",
									"      \"required\": [\r",
									"        \"emoji\"\r",
									"      ]\r",
									"    },\r",
									"    \"due\": {\r",
									"      \"type\": \"null\"\r",
									"    },\r",
									"    \"dueReminder\": {\r",
									"      \"type\": \"null\"\r",
									"    },\r",
									"    \"email\": {\r",
									"      \"type\": \"null\"\r",
									"    },\r",
									"    \"idBoard\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"idChecklists\": {\r",
									"      \"type\": \"array\",\r",
									"      \"items\": {}\r",
									"    },\r",
									"    \"idList\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"idMembers\": {\r",
									"      \"type\": \"array\",\r",
									"      \"items\": {}\r",
									"    },\r",
									"    \"idMembersVoted\": {\r",
									"      \"type\": \"array\",\r",
									"      \"items\": {}\r",
									"    },\r",
									"    \"idShort\": {\r",
									"      \"type\": \"integer\"\r",
									"    },\r",
									"    \"idAttachmentCover\": {\r",
									"      \"type\": \"null\"\r",
									"    },\r",
									"    \"labels\": {\r",
									"      \"type\": \"array\",\r",
									"      \"items\": {}\r",
									"    },\r",
									"    \"idLabels\": {\r",
									"      \"type\": \"array\",\r",
									"      \"items\": {}\r",
									"    },\r",
									"    \"manualCoverAttachment\": {\r",
									"      \"type\": \"boolean\"\r",
									"    },\r",
									"    \"name\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"pos\": {\r",
									"      \"type\": \"integer\"\r",
									"    },\r",
									"    \"shortLink\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"shortUrl\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"start\": {\r",
									"      \"type\": \"null\"\r",
									"    },\r",
									"    \"subscribed\": {\r",
									"      \"type\": \"boolean\"\r",
									"    },\r",
									"    \"url\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"cover\": {\r",
									"      \"type\": \"object\",\r",
									"      \"properties\": {\r",
									"        \"idAttachment\": {\r",
									"          \"type\": \"null\"\r",
									"        },\r",
									"        \"color\": {\r",
									"          \"type\": \"null\"\r",
									"        },\r",
									"        \"idUploadedBackground\": {\r",
									"          \"type\": \"null\"\r",
									"        },\r",
									"        \"size\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"brightness\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"idPlugin\": {\r",
									"          \"type\": \"null\"\r",
									"        }\r",
									"      },\r",
									"      \"required\": [\r",
									"        \"idAttachment\",\r",
									"        \"color\",\r",
									"        \"idUploadedBackground\",\r",
									"        \"size\",\r",
									"        \"brightness\",\r",
									"        \"idPlugin\"\r",
									"      ]\r",
									"    },\r",
									"    \"isTemplate\": {\r",
									"      \"type\": \"boolean\"\r",
									"    },\r",
									"    \"cardRole\": {\r",
									"      \"type\": \"null\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"id\",\r",
									"    \"badges\",\r",
									"    \"checkItemStates\",\r",
									"    \"closed\",\r",
									"    \"dueComplete\",\r",
									"    \"dateLastActivity\",\r",
									"    \"desc\",\r",
									"    \"descData\",\r",
									"    \"due\",\r",
									"    \"dueReminder\",\r",
									"    \"email\",\r",
									"    \"idBoard\",\r",
									"    \"idChecklists\",\r",
									"    \"idList\",\r",
									"    \"idMembers\",\r",
									"    \"idMembersVoted\",\r",
									"    \"idShort\",\r",
									"    \"idAttachmentCover\",\r",
									"    \"labels\",\r",
									"    \"idLabels\",\r",
									"    \"manualCoverAttachment\",\r",
									"    \"name\",\r",
									"    \"pos\",\r",
									"    \"shortLink\",\r",
									"    \"shortUrl\",\r",
									"    \"start\",\r",
									"    \"subscribed\",\r",
									"    \"url\",\r",
									"    \"cover\",\r",
									"    \"isTemplate\",\r",
									"    \"cardRole\"\r",
									"  ]\r",
									"}\r",
									"// check status code\r",
									"pm.test(\"Status code is 200\",  () => {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"// check response time\r",
									"pm.test(\"Response time is less than 3s\",  () => {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(3000);\r",
									"});\r",
									"\r",
									"// check if returned response in json format \r",
									"pm.test(\"verify content-type is in json format\", ()=>{\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).is.eql(\"application/json; charset=utf-8\");\r",
									"});\r",
									"\r",
									"// Parse the response body as JSON\r",
									"var jsonData = pm.response.json();\r",
									"\r",
									"\r",
									"\r",
									"// Perform JSON schema validation\r",
									"const result = tv4.validate(jsonData, card_schema);\r",
									"\r",
									"// Assert the result using Postman test assertions\r",
									"pm.test(\"Validate that JSON schema is correct\", ()=>{\r",
									"    pm.expect(result).to.be.true;\r",
									"});\r",
									"\r",
									"// check name of the created card\r",
									"pm.test(\"verify the name of card is correct\", ()=>{\r",
									"    pm.expect(jsonData.name).is.eql(pm.collectionVariables.get(\"cardName\"));\r",
									"\r",
									"});\r",
									"\r",
									"// check id of the board\r",
									"pm.test(\"verify the id of board & list is correct\", ()=>{\r",
									"    pm.expect(jsonData.idBoard).is.eql(pm.environment.get(\"boardId\"));\r",
									"    pm.expect(jsonData.idList).is.eql(pm.environment.get(\"listId\"));\r",
									"\r",
									"});\r",
									"\r",
									"// check Card id isn't null\r",
									"pm.test(\"Validate the id of Card\", ()=>{\r",
									"    pm.expect(jsonData.id).is.eql(pm.environment.get(\"cardId\"));\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{base-url}}/cards/{{cardId}}?key={{APIKey}}&token={{APIToken}}",
							"host": [
								"{{base-url}}"
							],
							"path": [
								"cards",
								"{{cardId}}"
							],
							"query": [
								{
									"key": "key",
									"value": "{{APIKey}}"
								},
								{
									"key": "token",
									"value": "{{APIToken}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Update-Card",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"const card_schema={\r",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"id\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"badges\": {\r",
									"      \"type\": \"object\",\r",
									"      \"properties\": {\r",
									"        \"attachmentsByType\": {\r",
									"          \"type\": \"object\",\r",
									"          \"properties\": {\r",
									"            \"trello\": {\r",
									"              \"type\": \"object\",\r",
									"              \"properties\": {\r",
									"                \"board\": {\r",
									"                  \"type\": \"integer\"\r",
									"                },\r",
									"                \"card\": {\r",
									"                  \"type\": \"integer\"\r",
									"                }\r",
									"              },\r",
									"              \"required\": [\r",
									"                \"board\",\r",
									"                \"card\"\r",
									"              ]\r",
									"            }\r",
									"          },\r",
									"          \"required\": [\r",
									"            \"trello\"\r",
									"          ]\r",
									"        },\r",
									"        \"location\": {\r",
									"          \"type\": \"boolean\"\r",
									"        },\r",
									"        \"votes\": {\r",
									"          \"type\": \"integer\"\r",
									"        },\r",
									"        \"viewingMemberVoted\": {\r",
									"          \"type\": \"boolean\"\r",
									"        },\r",
									"        \"subscribed\": {\r",
									"          \"type\": \"boolean\"\r",
									"        },\r",
									"        \"fogbugz\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"checkItems\": {\r",
									"          \"type\": \"integer\"\r",
									"        },\r",
									"        \"checkItemsChecked\": {\r",
									"          \"type\": \"integer\"\r",
									"        },\r",
									"        \"checkItemsEarliestDue\": {\r",
									"          \"type\": \"null\"\r",
									"        },\r",
									"        \"comments\": {\r",
									"          \"type\": \"integer\"\r",
									"        },\r",
									"        \"attachments\": {\r",
									"          \"type\": \"integer\"\r",
									"        },\r",
									"        \"description\": {\r",
									"          \"type\": \"boolean\"\r",
									"        },\r",
									"        \"due\": {\r",
									"          \"type\": \"null\"\r",
									"        },\r",
									"        \"dueComplete\": {\r",
									"          \"type\": \"boolean\"\r",
									"        },\r",
									"        \"start\": {\r",
									"          \"type\": \"null\"\r",
									"        }\r",
									"      },\r",
									"      \"required\": [\r",
									"        \"attachmentsByType\",\r",
									"        \"location\",\r",
									"        \"votes\",\r",
									"        \"viewingMemberVoted\",\r",
									"        \"subscribed\",\r",
									"        \"fogbugz\",\r",
									"        \"checkItems\",\r",
									"        \"checkItemsChecked\",\r",
									"        \"checkItemsEarliestDue\",\r",
									"        \"comments\",\r",
									"        \"attachments\",\r",
									"        \"description\",\r",
									"        \"due\",\r",
									"        \"dueComplete\",\r",
									"        \"start\"\r",
									"      ]\r",
									"    },\r",
									"    \"checkItemStates\": {\r",
									"      \"type\": \"array\",\r",
									"      \"items\": {}\r",
									"    },\r",
									"    \"closed\": {\r",
									"      \"type\": \"boolean\"\r",
									"    },\r",
									"    \"dueComplete\": {\r",
									"      \"type\": \"boolean\"\r",
									"    },\r",
									"    \"dateLastActivity\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"desc\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"descData\": {\r",
									"      \"type\": \"object\",\r",
									"      \"properties\": {\r",
									"        \"emoji\": {\r",
									"          \"type\": \"object\"\r",
									"        }\r",
									"      },\r",
									"      \"required\": [\r",
									"        \"emoji\"\r",
									"      ]\r",
									"    },\r",
									"    \"due\": {\r",
									"      \"type\": \"null\"\r",
									"    },\r",
									"    \"dueReminder\": {\r",
									"      \"type\": \"null\"\r",
									"    },\r",
									"    \"email\": {\r",
									"      \"type\": \"null\"\r",
									"    },\r",
									"    \"idBoard\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"idChecklists\": {\r",
									"      \"type\": \"array\",\r",
									"      \"items\": {}\r",
									"    },\r",
									"    \"idList\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"idMembers\": {\r",
									"      \"type\": \"array\",\r",
									"      \"items\": {}\r",
									"    },\r",
									"    \"idMembersVoted\": {\r",
									"      \"type\": \"array\",\r",
									"      \"items\": {}\r",
									"    },\r",
									"    \"idShort\": {\r",
									"      \"type\": \"integer\"\r",
									"    },\r",
									"    \"idAttachmentCover\": {\r",
									"      \"type\": \"null\"\r",
									"    },\r",
									"    \"labels\": {\r",
									"      \"type\": \"array\",\r",
									"      \"items\": {}\r",
									"    },\r",
									"    \"idLabels\": {\r",
									"      \"type\": \"array\",\r",
									"      \"items\": {}\r",
									"    },\r",
									"    \"manualCoverAttachment\": {\r",
									"      \"type\": \"boolean\"\r",
									"    },\r",
									"    \"name\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"pos\": {\r",
									"      \"type\": \"integer\"\r",
									"    },\r",
									"    \"shortLink\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"shortUrl\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"start\": {\r",
									"      \"type\": \"null\"\r",
									"    },\r",
									"    \"subscribed\": {\r",
									"      \"type\": \"boolean\"\r",
									"    },\r",
									"    \"url\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"cover\": {\r",
									"      \"type\": \"object\",\r",
									"      \"properties\": {\r",
									"        \"idAttachment\": {\r",
									"          \"type\": \"null\"\r",
									"        },\r",
									"        \"color\": {\r",
									"          \"type\": \"null\"\r",
									"        },\r",
									"        \"idUploadedBackground\": {\r",
									"          \"type\": \"null\"\r",
									"        },\r",
									"        \"size\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"brightness\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"idPlugin\": {\r",
									"          \"type\": \"null\"\r",
									"        }\r",
									"      },\r",
									"      \"required\": [\r",
									"        \"idAttachment\",\r",
									"        \"color\",\r",
									"        \"idUploadedBackground\",\r",
									"        \"size\",\r",
									"        \"brightness\",\r",
									"        \"idPlugin\"\r",
									"      ]\r",
									"    },\r",
									"    \"isTemplate\": {\r",
									"      \"type\": \"boolean\"\r",
									"    },\r",
									"    \"cardRole\": {\r",
									"      \"type\": \"null\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"id\",\r",
									"    \"badges\",\r",
									"    \"checkItemStates\",\r",
									"    \"closed\",\r",
									"    \"dueComplete\",\r",
									"    \"dateLastActivity\",\r",
									"    \"desc\",\r",
									"    \"descData\",\r",
									"    \"due\",\r",
									"    \"dueReminder\",\r",
									"    \"email\",\r",
									"    \"idBoard\",\r",
									"    \"idChecklists\",\r",
									"    \"idList\",\r",
									"    \"idMembers\",\r",
									"    \"idMembersVoted\",\r",
									"    \"idShort\",\r",
									"    \"idAttachmentCover\",\r",
									"    \"labels\",\r",
									"    \"idLabels\",\r",
									"    \"manualCoverAttachment\",\r",
									"    \"name\",\r",
									"    \"pos\",\r",
									"    \"shortLink\",\r",
									"    \"shortUrl\",\r",
									"    \"start\",\r",
									"    \"subscribed\",\r",
									"    \"url\",\r",
									"    \"cover\",\r",
									"    \"isTemplate\",\r",
									"    \"cardRole\"\r",
									"  ]\r",
									"}\r",
									"// check status code\r",
									"pm.test(\"Status code is 200\",  () => {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"// check response time\r",
									"pm.test(\"Response time is less than 3s\",  () => {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(3000);\r",
									"});\r",
									"\r",
									"// check if returned response in json format \r",
									"pm.test(\"verify content-type is in json format\", ()=>{\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).is.eql(\"application/json; charset=utf-8\");\r",
									"});\r",
									"\r",
									"// Parse the response body as JSON\r",
									"var jsonData = pm.response.json();\r",
									"\r",
									"\r",
									"\r",
									"// Perform JSON schema validation\r",
									"const result = tv4.validate(jsonData, card_schema);\r",
									"\r",
									"// Assert the result using Postman test assertions\r",
									"pm.test(\"Validate that JSON schema is correct\", ()=>{\r",
									"    pm.expect(result).to.be.true;\r",
									"});\r",
									"\r",
									"\r",
									"// check id of the board\r",
									"pm.test(\"verify the id of board & list is correct\", ()=>{\r",
									"    pm.expect(jsonData.idBoard).is.eql(pm.environment.get(\"boardId\"));\r",
									"    pm.expect(jsonData.idList).is.eql(pm.environment.get(\"listId\"));\r",
									"\r",
									"});\r",
									"\r",
									"// check Card id isn't null\r",
									"pm.test(\"Validate the id of Card\", ()=>{\r",
									"    pm.expect(jsonData.id).is.eql(pm.environment.get(\"cardId\"));\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{base-url}}/cards/{{cardId}}?key={{APIKey}}&token={{APIToken}}&closed=false&name=updatedCard",
							"host": [
								"{{base-url}}"
							],
							"path": [
								"cards",
								"{{cardId}}"
							],
							"query": [
								{
									"key": "key",
									"value": "{{APIKey}}"
								},
								{
									"key": "token",
									"value": "{{APIToken}}"
								},
								{
									"key": "closed",
									"value": "false"
								},
								{
									"key": "name",
									"value": "updatedCard"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get-Field-On-Card",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// check status code\r",
									"pm.test(\"Status code is 200\",  () => {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"// check response time\r",
									"pm.test(\"Response time is less than 3s\",  () => {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(3000);\r",
									"});\r",
									"\r",
									"// check if returned response in json format \r",
									"pm.test(\"verify content-type is in json format\", ()=>{\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).is.eql(\"application/json; charset=utf-8\");\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"verify the response is an object\", ()=>{\r",
									"  // Ensure the response body is not null\r",
									"pm.expect(pm.response.json()).to.not.be.null;\r",
									"\r",
									"// Check if the response body is an object\r",
									"pm.expect(typeof pm.response.json()).to.equal('object');\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									"\r",
									" "
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{base-url}}/cards/{{cardId}}/name?key={{APIKey}}&token={{APIToken}}",
							"host": [
								"{{base-url}}"
							],
							"path": [
								"cards",
								"{{cardId}}",
								"name"
							],
							"query": [
								{
									"key": "key",
									"value": "{{APIKey}}"
								},
								{
									"key": "token",
									"value": "{{APIToken}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Create-Attach-On-Card",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const attach_schema={\r",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"id\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"date\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"edgeColor\": {\r",
									"      \"type\": \"null\"\r",
									"    },\r",
									"    \"idMember\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"isUpload\": {\r",
									"      \"type\": \"boolean\"\r",
									"    },\r",
									"    \"mimeType\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"name\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"previews\": {\r",
									"      \"type\": \"array\",\r",
									"      \"items\": {}\r",
									"    },\r",
									"    \"url\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"pos\": {\r",
									"      \"type\": \"integer\"\r",
									"    },\r",
									"    \"fileName\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"limits\": {\r",
									"      \"type\": \"object\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"id\",\r",
									"    \"date\",\r",
									"    \"edgeColor\",\r",
									"    \"idMember\",\r",
									"    \"isUpload\",\r",
									"    \"mimeType\",\r",
									"    \"name\",\r",
									"    \"previews\",\r",
									"    \"url\",\r",
									"    \"pos\",\r",
									"    \"fileName\",\r",
									"    \"limits\"\r",
									"  ]\r",
									"}\r",
									"// check status code\r",
									"pm.test(\"Status code is 200\",  () => {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"// check response time\r",
									"pm.test(\"Response time is less than 3s\",  () => {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(3000);\r",
									"});\r",
									"\r",
									"// check if returned response in json format \r",
									"pm.test(\"verify content-type is in json format\", ()=>{\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).is.eql(\"application/json; charset=utf-8\");\r",
									"});\r",
									"\r",
									"// Parse the response body as JSON\r",
									"var jsonData = pm.response.json();\r",
									"\r",
									"\r",
									"\r",
									"// Perform JSON schema validation\r",
									"const result = tv4.validate(jsonData, attach_schema);\r",
									"\r",
									"// Assert the result using Postman test assertions\r",
									"pm.test(\"Validate that JSON schema is correct\", ()=>{\r",
									"    pm.expect(result).to.be.true;\r",
									"});\r",
									"\r",
									"// check name of the created attachment\r",
									"pm.test(\"verify the name of attachment is correct\", ()=>{\r",
									"    pm.expect(jsonData.name).is.eql(pm.collectionVariables.get(\"attachName\"));\r",
									"\r",
									"});\r",
									"\r",
									"\r",
									"// check Card id isn't null\r",
									"pm.test(\"Validate the id isn't null\", ()=>{\r",
									"    pm.expect(jsonData.id).is.not.null;\r",
									"});\r",
									"pm.environment.set(\"attachId\",jsonData.id);\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const randomAttach = 'Attach' + Math.floor(Math.random() * 1000);\r",
									"pm.collectionVariables.set(\"attachName\",randomAttach);\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "file",
									"type": "file",
									"src": "testing.txt"
								}
							]
						},
						"url": {
							"raw": "{{base-url}}/cards/{{cardId}}/attachments?key={{APIKey}}&token={{APIToken}}&name={{attachName}}&fileName=test",
							"host": [
								"{{base-url}}"
							],
							"path": [
								"cards",
								"{{cardId}}",
								"attachments"
							],
							"query": [
								{
									"key": "key",
									"value": "{{APIKey}}"
								},
								{
									"key": "token",
									"value": "{{APIToken}}"
								},
								{
									"key": "name",
									"value": "{{attachName}}"
								},
								{
									"key": "url",
									"value": "https://trello.com/",
									"disabled": true
								},
								{
									"key": "fileName",
									"value": "test"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get-Attach-On-Card",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const attach_schema={\r",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"id\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"date\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"edgeColor\": {\r",
									"      \"type\": \"null\"\r",
									"    },\r",
									"    \"idMember\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"isUpload\": {\r",
									"      \"type\": \"boolean\"\r",
									"    },\r",
									"    \"mimeType\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"name\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"previews\": {\r",
									"      \"type\": \"array\",\r",
									"      \"items\": {}\r",
									"    },\r",
									"    \"url\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"pos\": {\r",
									"      \"type\": \"integer\"\r",
									"    },\r",
									"    \"fileName\": {\r",
									"      \"type\": \"string\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"id\",\r",
									"    \"bytes\",\r",
									"    \"date\",\r",
									"    \"edgeColor\",\r",
									"    \"idMember\",\r",
									"    \"isUpload\",\r",
									"    \"mimeType\",\r",
									"    \"name\",\r",
									"    \"previews\",\r",
									"    \"url\",\r",
									"    \"pos\",\r",
									"    \"fileName\"\r",
									"  ]\r",
									"}\r",
									"// check status code\r",
									"pm.test(\"Status code is 200\",  () => {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"// check response time\r",
									"pm.test(\"Response time is less than 3s\",  () => {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(3000);\r",
									"});\r",
									"\r",
									"// check if returned response in json format \r",
									"pm.test(\"verify content-type is in json format\", ()=>{\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).is.eql(\"application/json; charset=utf-8\");\r",
									"});\r",
									"\r",
									"// Parse the response body as JSON\r",
									"var jsonData = pm.response.json();\r",
									"\r",
									"\r",
									"\r",
									"// Perform JSON schema validation\r",
									"const result = tv4.validate(jsonData, attach_schema);\r",
									"\r",
									"// Assert the result using Postman test assertions\r",
									"pm.test(\"Validate that JSON schema is correct\", ()=>{\r",
									"    pm.expect(result).to.be.true;\r",
									"});\r",
									"\r",
									"// check name of the created attachment\r",
									"pm.test(\"verify the name of attachment is correct\", ()=>{\r",
									"    pm.expect(jsonData.name).is.eql(pm.collectionVariables.get(\"attachName\"));\r",
									"\r",
									"});\r",
									"\r",
									"\r",
									"// check Card id isn't null\r",
									"pm.test(\"Validate the attachment Id\", ()=>{\r",
									"    pm.expect(jsonData.id).is.eql(pm.environment.get(\"attachId\"));\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{base-url}}/cards/{{cardId}}/attachments/{{attachId}}?key={{APIKey}}&token={{APIToken}}",
							"host": [
								"{{base-url}}"
							],
							"path": [
								"cards",
								"{{cardId}}",
								"attachments",
								"{{attachId}}"
							],
							"query": [
								{
									"key": "key",
									"value": "{{APIKey}}"
								},
								{
									"key": "token",
									"value": "{{APIToken}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Create-Label-On-Card",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const randomLabel = 'Label' + Math.floor(Math.random() * 1000);\r",
									"pm.collectionVariables.set(\"labelName\",randomLabel);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"const label_schema={\r",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"id\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"idBoard\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"name\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"color\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"uses\": {\r",
									"      \"type\": \"integer\"\r",
									"    },\r",
									"    \"limits\": {\r",
									"      \"type\": \"object\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"id\",\r",
									"    \"idBoard\",\r",
									"    \"name\",\r",
									"    \"color\",\r",
									"    \"uses\",\r",
									"    \"limits\"\r",
									"  ]\r",
									"}\r",
									"// check status code\r",
									"pm.test(\"Status code is 200\",  () => {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"// check response time\r",
									"pm.test(\"Response time is less than 3s\",  () => {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(3000);\r",
									"});\r",
									"\r",
									"// check if returned response in json format \r",
									"pm.test(\"verify content-type is in json format\", ()=>{\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).is.eql(\"application/json; charset=utf-8\");\r",
									"});\r",
									"\r",
									"// Parse the response body as JSON\r",
									"var jsonData = pm.response.json();\r",
									"\r",
									"\r",
									"\r",
									"// Perform JSON schema validation\r",
									"const result = tv4.validate(jsonData, label_schema);\r",
									"\r",
									"// Assert the result using Postman test assertions\r",
									"pm.test(\"Validate that JSON schema is correct\", ()=>{\r",
									"    pm.expect(result).to.be.true;\r",
									"});\r",
									"\r",
									"// check name of the created label\r",
									"pm.test(\"verify the name of Label is correct\", ()=>{\r",
									"    pm.expect(jsonData.name).is.eql(pm.collectionVariables.get(\"labelName\"));\r",
									"\r",
									"});\r",
									"\r",
									"\r",
									"// check Card id isn't null\r",
									"pm.test(\"Validate the id isn't null\", ()=>{\r",
									"    pm.expect(jsonData.id).is.not.null;\r",
									"});\r",
									"pm.environment.set(\"labelId\",jsonData.id);\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{base-url}}/cards/{{cardId}}/labels?color=red&key={{APIKey}}&token={{APIToken}}&name={{labelName}}",
							"host": [
								"{{base-url}}"
							],
							"path": [
								"cards",
								"{{cardId}}",
								"labels"
							],
							"query": [
								{
									"key": "color",
									"value": "red"
								},
								{
									"key": "key",
									"value": "{{APIKey}}"
								},
								{
									"key": "token",
									"value": "{{APIToken}}"
								},
								{
									"key": "name",
									"value": "{{labelName}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Create-Checklist-On-Card",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const randomChecklist = 'checklist' + Math.floor(Math.random() * 1000);\r",
									"pm.collectionVariables.set(\"checklistName\",randomChecklist);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"const checklist_schema={\r",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"id\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"name\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"idBoard\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"idCard\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"pos\": {\r",
									"      \"type\": \"integer\"\r",
									"    },\r",
									"    \"checkItems\": {\r",
									"      \"type\": \"array\",\r",
									"      \"items\": {}\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"id\",\r",
									"    \"name\",\r",
									"    \"idBoard\",\r",
									"    \"idCard\",\r",
									"    \"pos\",\r",
									"    \"checkItems\"\r",
									"  ]\r",
									"}\r",
									"\r",
									"// check status code\r",
									"pm.test(\"Status code is 200\",  () => {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"// check response time\r",
									"pm.test(\"Response time is less than 3s\",  () => {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(3000);\r",
									"});\r",
									"\r",
									"// check if returned response in json format \r",
									"pm.test(\"verify content-type is in json format\", ()=>{\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).is.eql(\"application/json; charset=utf-8\");\r",
									"});\r",
									"\r",
									"// Parse the response body as JSON\r",
									"var jsonData = pm.response.json();\r",
									"\r",
									"\r",
									"\r",
									"// Perform JSON schema validation\r",
									"const result = tv4.validate(jsonData, checklist_schema);\r",
									"\r",
									"// Assert the result using Postman test assertions\r",
									"pm.test(\"Validate that JSON schema is correct\", ()=>{\r",
									"    pm.expect(result).to.be.true;\r",
									"});\r",
									"\r",
									"// check name of the created checklist\r",
									"pm.test(\"verify the name of checklist is correct\", ()=>{\r",
									"    pm.expect(jsonData.name).is.eql(pm.collectionVariables.get(\"checklistName\"));\r",
									"\r",
									"});\r",
									"\r",
									"// check id of the board & card\r",
									"pm.test(\"verify the id of board & card are correct\", ()=>{\r",
									"    pm.expect(jsonData.idBoard).is.eql(pm.environment.get(\"boardId\"));\r",
									"    pm.expect(jsonData.idCard).is.eql(pm.environment.get(\"cardId\"));\r",
									"\r",
									"\r",
									"});\r",
									"\r",
									"// check checklist id isn't null\r",
									"pm.test(\"verify the id of checklist isn't null\", ()=>{\r",
									"    pm.expect(jsonData.id).is.not.null;\r",
									"});\r",
									"// set checkListId \r",
									"pm.environment.set(\"checklistId\",jsonData.id)\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{base-url}}/cards/{{cardId}}/checklists?key={{APIKey}}&token={{APIToken}}&name={{checklistName}}",
							"host": [
								"{{base-url}}"
							],
							"path": [
								"cards",
								"{{cardId}}",
								"checklists"
							],
							"query": [
								{
									"key": "key",
									"value": "{{APIKey}}"
								},
								{
									"key": "token",
									"value": "{{APIToken}}"
								},
								{
									"key": "name",
									"value": "{{checklistName}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get-Checklist-On-Card",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const checklist_schema={\r",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"id\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"name\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"idBoard\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"idCard\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"pos\": {\r",
									"      \"type\": \"integer\"\r",
									"    },\r",
									"    \"checkItems\": {\r",
									"      \"type\": \"array\",\r",
									"      \"items\": {}\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"id\",\r",
									"    \"name\",\r",
									"    \"idBoard\",\r",
									"    \"idCard\",\r",
									"    \"pos\",\r",
									"    \"checkItems\"\r",
									"  ]\r",
									"}\r",
									"\r",
									"\r",
									"// check status code\r",
									"pm.test(\"Status code is 200\",  () => {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"// check response time\r",
									"pm.test(\"Response time is less than 3s\",  () => {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(3000);\r",
									"});\r",
									"\r",
									"// check if returned response in json format \r",
									"pm.test(\"verify content-type is in json format\", ()=>{\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).is.eql(\"application/json; charset=utf-8\");\r",
									"});\r",
									"\r",
									"// Parse the response body as JSON\r",
									"var jsonData = pm.response.json();\r",
									"\r",
									"\r",
									"\r",
									"// Perform JSON schema validation\r",
									"const result = tv4.validate(jsonData, checklist_schema);\r",
									"\r",
									"// Assert the result using Postman test assertions\r",
									"pm.test(\"Validate that JSON schema is correct\", ()=>{\r",
									"    pm.expect(result).to.be.true;\r",
									"});\r",
									"\r",
									"// check name of the created checklist\r",
									"pm.test(\"verify the name of checklist is correct\", ()=>{\r",
									"    pm.expect(jsonData.name).is.eql(pm.collectionVariables.get(\"checklistName\"));\r",
									"\r",
									"});\r",
									"\r",
									"// check id of the board & card\r",
									"pm.test(\"verify the id of board & card are correct\", ()=>{\r",
									"    pm.expect(jsonData.idBoard).is.eql(pm.environment.get(\"boardId\"));\r",
									"    pm.expect(jsonData.idCard).is.eql(pm.environment.get(\"cardId\"));\r",
									"\r",
									"\r",
									"});\r",
									"\r",
									"// check checklist id \r",
									"pm.test(\"validate the id of checklist\", ()=>{\r",
									"    pm.expect(jsonData.id).is.eql(pm.environment.get(\"checklistId\"));\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base-url}}/checklists/{{checklistId}}?key={{APIKey}}&token={{APIToken}}",
							"host": [
								"{{base-url}}"
							],
							"path": [
								"checklists",
								"{{checklistId}}"
							],
							"query": [
								{
									"key": "key",
									"value": "{{APIKey}}"
								},
								{
									"key": "token",
									"value": "{{APIToken}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Create-Checkitem-On-Checklist",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const randomCheckitem = 'checkitem' + Math.floor(Math.random() * 1000);\r",
									"pm.collectionVariables.set(\"checkitemName\",randomCheckitem);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"const checkitem_schema={\r",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"id\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"name\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"nameData\": {\r",
									"      \"type\": \"object\",\r",
									"      \"properties\": {\r",
									"        \"emoji\": {\r",
									"          \"type\": \"object\"\r",
									"        }\r",
									"      },\r",
									"      \"required\": [\r",
									"        \"emoji\"\r",
									"      ]\r",
									"    },\r",
									"    \"pos\": {\r",
									"      \"type\": \"integer\"\r",
									"    },\r",
									"    \"state\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"due\": {\r",
									"      \"type\": \"null\"\r",
									"    },\r",
									"    \"dueReminder\": {\r",
									"      \"type\": \"null\"\r",
									"    },\r",
									"    \"idMember\": {\r",
									"      \"type\": \"null\"\r",
									"    },\r",
									"    \"idChecklist\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"limits\": {\r",
									"      \"type\": \"object\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"id\",\r",
									"    \"name\",\r",
									"    \"nameData\",\r",
									"    \"pos\",\r",
									"    \"state\",\r",
									"    \"due\",\r",
									"    \"dueReminder\",\r",
									"    \"idMember\",\r",
									"    \"idChecklist\",\r",
									"    \"limits\"\r",
									"  ]\r",
									"}\r",
									"\r",
									"// check status code\r",
									"pm.test(\"Status code is 200\",  () => {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"// check response time\r",
									"pm.test(\"Response time is less than 3s\",  () => {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(3000);\r",
									"});\r",
									"\r",
									"// check if returned response in json format \r",
									"pm.test(\"verify content-type is in json format\", ()=>{\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).is.eql(\"application/json; charset=utf-8\");\r",
									"});\r",
									"\r",
									"// Parse the response body as JSON\r",
									"var jsonData = pm.response.json();\r",
									"\r",
									"\r",
									"\r",
									"// Perform JSON schema validation\r",
									"const result = tv4.validate(jsonData, checkitem_schema);\r",
									"\r",
									"// Assert the result using Postman test assertions\r",
									"pm.test(\"Validate that JSON schema is correct\", ()=>{\r",
									"    pm.expect(result).to.be.true;\r",
									"});\r",
									"\r",
									"// check name of the created checkitem\r",
									"\r",
									"pm.test(\"verify the name of checkitem is correct\", ()=>{\r",
									"    pm.expect(jsonData.name).is.eql(pm.collectionVariables.get(\"checkitemName\"));\r",
									"\r",
									"});\r",
									"\r",
									"// check id of the Checklist\r",
									"pm.test(\"verify the id of Checklist is correct\", ()=>{\r",
									"    pm.expect(jsonData.idChecklist).is.eql(pm.environment.get(\"checklistId\"));\r",
									"\r",
									"});\r",
									"// check checkitem id isn't null\r",
									"pm.test(\"verify the id of checkitem isn't null\", ()=>{\r",
									"    pm.expect(jsonData.id).is.not.null;\r",
									"});\r",
									"// set checkitemId \r",
									"pm.environment.set(\"checkitemId\",jsonData.id)\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{base-url}}/checklists/{{checklistId}}/checkItems?key={{APIKey}}&token={{APIToken}}&name={{checkitemName}}",
							"host": [
								"{{base-url}}"
							],
							"path": [
								"checklists",
								"{{checklistId}}",
								"checkItems"
							],
							"query": [
								{
									"key": "key",
									"value": "{{APIKey}}"
								},
								{
									"key": "token",
									"value": "{{APIToken}}"
								},
								{
									"key": "name",
									"value": "{{checkitemName}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get-Checkitem-On-Checklist",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const checkitem_schema={\r",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"id\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"name\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"nameData\": {\r",
									"      \"type\": \"object\",\r",
									"      \"properties\": {\r",
									"        \"emoji\": {\r",
									"          \"type\": \"object\"\r",
									"        }\r",
									"      },\r",
									"      \"required\": [\r",
									"        \"emoji\"\r",
									"      ]\r",
									"    },\r",
									"    \"pos\": {\r",
									"      \"type\": \"integer\"\r",
									"    },\r",
									"    \"state\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"due\": {\r",
									"      \"type\": \"null\"\r",
									"    },\r",
									"    \"dueReminder\": {\r",
									"      \"type\": \"null\"\r",
									"    },\r",
									"    \"idMember\": {\r",
									"      \"type\": \"null\"\r",
									"    },\r",
									"    \"idChecklist\": {\r",
									"      \"type\": \"string\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"id\",\r",
									"    \"name\",\r",
									"    \"nameData\",\r",
									"    \"pos\",\r",
									"    \"state\",\r",
									"    \"due\",\r",
									"    \"dueReminder\",\r",
									"    \"idMember\",\r",
									"    \"idChecklist\"\r",
									"  ]\r",
									"}\r",
									"// check status code\r",
									"pm.test(\"Status code is 200\",  () => {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"// check response time\r",
									"pm.test(\"Response time is less than 3s\",  () => {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(3000);\r",
									"});\r",
									"\r",
									"// check if returned response in json format \r",
									"pm.test(\"verify content-type is in json format\", ()=>{\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).is.eql(\"application/json; charset=utf-8\");\r",
									"});\r",
									"\r",
									"// Parse the response body as JSON\r",
									"var jsonData = pm.response.json();\r",
									"\r",
									"\r",
									"\r",
									"// Perform JSON schema validation\r",
									"const result = tv4.validate(jsonData, checkitem_schema);\r",
									"\r",
									"// Assert the result using Postman test assertions\r",
									"pm.test(\"Validate that JSON schema is correct\", ()=>{\r",
									"    pm.expect(result).to.be.true;\r",
									"});\r",
									"\r",
									"// check name of the created checkitem\r",
									"\r",
									"pm.test(\"verify the name of checkitem is correct\", ()=>{\r",
									"    pm.expect(jsonData.name).is.eql(pm.collectionVariables.get(\"checkitemName\"));\r",
									"\r",
									"});\r",
									"\r",
									"// check id of the Checklist\r",
									"pm.test(\"verify the id of Checklist is correct\", ()=>{\r",
									"    pm.expect(jsonData.idChecklist).is.eql(pm.environment.get(\"checklistId\"));\r",
									"\r",
									"});\r",
									"// check checkitem id \r",
									"pm.test(\"validate the id of checkitem\", ()=>{\r",
									"    pm.expect(jsonData.id).is.eql(pm.environment.get(\"checkitemId\"));\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base-url}}/checklists/{{checklistId}}/checkItems/{{checkitemId}}?key={{APIKey}}&token={{APIToken}}",
							"host": [
								"{{base-url}}"
							],
							"path": [
								"checklists",
								"{{checklistId}}",
								"checkItems",
								"{{checkitemId}}"
							],
							"query": [
								{
									"key": "key",
									"value": "{{APIKey}}"
								},
								{
									"key": "token",
									"value": "{{APIToken}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Create-Comment-On-Card",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const comment = 'this is testing comment on a card' + Math.floor(Math.random() * 1000);\r",
									"pm.collectionVariables.set(\"comment\",comment);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"const action_schema={\r",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"id\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"idMemberCreator\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"data\": {\r",
									"      \"type\": \"object\",\r",
									"      \"properties\": {\r",
									"        \"text\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"textData\": {\r",
									"          \"type\": \"object\",\r",
									"          \"properties\": {\r",
									"            \"emoji\": {\r",
									"              \"type\": \"object\"\r",
									"            }\r",
									"          },\r",
									"          \"required\": [\r",
									"            \"emoji\"\r",
									"          ]\r",
									"        },\r",
									"        \"card\": {\r",
									"          \"type\": \"object\",\r",
									"          \"properties\": {\r",
									"            \"id\": {\r",
									"              \"type\": \"string\"\r",
									"            },\r",
									"            \"name\": {\r",
									"              \"type\": \"string\"\r",
									"            },\r",
									"            \"idShort\": {\r",
									"              \"type\": \"integer\"\r",
									"            },\r",
									"            \"shortLink\": {\r",
									"              \"type\": \"string\"\r",
									"            }\r",
									"          },\r",
									"          \"required\": [\r",
									"            \"id\",\r",
									"            \"name\",\r",
									"            \"idShort\",\r",
									"            \"shortLink\"\r",
									"          ]\r",
									"        },\r",
									"        \"board\": {\r",
									"          \"type\": \"object\",\r",
									"          \"properties\": {\r",
									"            \"id\": {\r",
									"              \"type\": \"string\"\r",
									"            },\r",
									"            \"name\": {\r",
									"              \"type\": \"string\"\r",
									"            },\r",
									"            \"shortLink\": {\r",
									"              \"type\": \"string\"\r",
									"            }\r",
									"          },\r",
									"          \"required\": [\r",
									"            \"id\",\r",
									"            \"name\",\r",
									"            \"shortLink\"\r",
									"          ]\r",
									"        },\r",
									"        \"list\": {\r",
									"          \"type\": \"object\",\r",
									"          \"properties\": {\r",
									"            \"id\": {\r",
									"              \"type\": \"string\"\r",
									"            },\r",
									"            \"name\": {\r",
									"              \"type\": \"string\"\r",
									"            }\r",
									"          },\r",
									"          \"required\": [\r",
									"            \"id\",\r",
									"            \"name\"\r",
									"          ]\r",
									"        }\r",
									"      },\r",
									"      \"required\": [\r",
									"        \"text\",\r",
									"        \"textData\",\r",
									"        \"card\",\r",
									"        \"board\",\r",
									"        \"list\"\r",
									"      ]\r",
									"    },\r",
									"    \"appCreator\": {\r",
									"      \"type\": \"object\",\r",
									"      \"properties\": {\r",
									"        \"id\": {\r",
									"          \"type\": \"string\"\r",
									"        }\r",
									"      },\r",
									"      \"required\": [\r",
									"        \"id\"\r",
									"      ]\r",
									"    },\r",
									"    \"type\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"date\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"limits\": {\r",
									"      \"type\": \"object\",\r",
									"      \"properties\": {\r",
									"        \"reactions\": {\r",
									"          \"type\": \"object\",\r",
									"          \"properties\": {\r",
									"            \"perAction\": {\r",
									"              \"type\": \"object\",\r",
									"              \"properties\": {\r",
									"                \"status\": {\r",
									"                  \"type\": \"string\"\r",
									"                },\r",
									"                \"disableAt\": {\r",
									"                  \"type\": \"integer\"\r",
									"                },\r",
									"                \"warnAt\": {\r",
									"                  \"type\": \"integer\"\r",
									"                }\r",
									"              },\r",
									"              \"required\": [\r",
									"                \"status\",\r",
									"                \"disableAt\",\r",
									"                \"warnAt\"\r",
									"              ]\r",
									"            },\r",
									"            \"uniquePerAction\": {\r",
									"              \"type\": \"object\",\r",
									"              \"properties\": {\r",
									"                \"status\": {\r",
									"                  \"type\": \"string\"\r",
									"                },\r",
									"                \"disableAt\": {\r",
									"                  \"type\": \"integer\"\r",
									"                },\r",
									"                \"warnAt\": {\r",
									"                  \"type\": \"integer\"\r",
									"                }\r",
									"              },\r",
									"              \"required\": [\r",
									"                \"status\",\r",
									"                \"disableAt\",\r",
									"                \"warnAt\"\r",
									"              ]\r",
									"            }\r",
									"          },\r",
									"          \"required\": [\r",
									"            \"perAction\",\r",
									"            \"uniquePerAction\"\r",
									"          ]\r",
									"        }\r",
									"      },\r",
									"      \"required\": [\r",
									"        \"reactions\"\r",
									"      ]\r",
									"    },\r",
									"    \"display\": {\r",
									"      \"type\": \"object\",\r",
									"      \"properties\": {\r",
									"        \"translationKey\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"entities\": {\r",
									"          \"type\": \"object\",\r",
									"          \"properties\": {\r",
									"            \"contextOn\": {\r",
									"              \"type\": \"object\",\r",
									"              \"properties\": {\r",
									"                \"type\": {\r",
									"                  \"type\": \"string\"\r",
									"                },\r",
									"                \"translationKey\": {\r",
									"                  \"type\": \"string\"\r",
									"                },\r",
									"                \"hideIfContext\": {\r",
									"                  \"type\": \"boolean\"\r",
									"                },\r",
									"                \"idContext\": {\r",
									"                  \"type\": \"string\"\r",
									"                }\r",
									"              },\r",
									"              \"required\": [\r",
									"                \"type\",\r",
									"                \"translationKey\",\r",
									"                \"hideIfContext\",\r",
									"                \"idContext\"\r",
									"              ]\r",
									"            },\r",
									"            \"card\": {\r",
									"              \"type\": \"object\",\r",
									"              \"properties\": {\r",
									"                \"type\": {\r",
									"                  \"type\": \"string\"\r",
									"                },\r",
									"                \"hideIfContext\": {\r",
									"                  \"type\": \"boolean\"\r",
									"                },\r",
									"                \"id\": {\r",
									"                  \"type\": \"string\"\r",
									"                },\r",
									"                \"shortLink\": {\r",
									"                  \"type\": \"string\"\r",
									"                },\r",
									"                \"text\": {\r",
									"                  \"type\": \"string\"\r",
									"                }\r",
									"              },\r",
									"              \"required\": [\r",
									"                \"type\",\r",
									"                \"hideIfContext\",\r",
									"                \"id\",\r",
									"                \"shortLink\",\r",
									"                \"text\"\r",
									"              ]\r",
									"            },\r",
									"            \"comment\": {\r",
									"              \"type\": \"object\",\r",
									"              \"properties\": {\r",
									"                \"type\": {\r",
									"                  \"type\": \"string\"\r",
									"                },\r",
									"                \"text\": {\r",
									"                  \"type\": \"string\"\r",
									"                }\r",
									"              },\r",
									"              \"required\": [\r",
									"                \"type\",\r",
									"                \"text\"\r",
									"              ]\r",
									"            },\r",
									"            \"memberCreator\": {\r",
									"              \"type\": \"object\",\r",
									"              \"properties\": {\r",
									"                \"type\": {\r",
									"                  \"type\": \"string\"\r",
									"                },\r",
									"                \"id\": {\r",
									"                  \"type\": \"string\"\r",
									"                },\r",
									"                \"username\": {\r",
									"                  \"type\": \"string\"\r",
									"                },\r",
									"                \"text\": {\r",
									"                  \"type\": \"string\"\r",
									"                }\r",
									"              },\r",
									"              \"required\": [\r",
									"                \"type\",\r",
									"                \"id\",\r",
									"                \"username\",\r",
									"                \"text\"\r",
									"              ]\r",
									"            }\r",
									"          },\r",
									"          \"required\": [\r",
									"            \"contextOn\",\r",
									"            \"card\",\r",
									"            \"comment\",\r",
									"            \"memberCreator\"\r",
									"          ]\r",
									"        }\r",
									"      },\r",
									"      \"required\": [\r",
									"        \"translationKey\",\r",
									"        \"entities\"\r",
									"      ]\r",
									"    },\r",
									"    \"entities\": {\r",
									"      \"type\": \"array\",\r",
									"      \"items\": [\r",
									"        {\r",
									"          \"type\": \"object\",\r",
									"          \"properties\": {\r",
									"            \"type\": {\r",
									"              \"type\": \"string\"\r",
									"            },\r",
									"            \"id\": {\r",
									"              \"type\": \"string\"\r",
									"            },\r",
									"            \"username\": {\r",
									"              \"type\": \"string\"\r",
									"            },\r",
									"            \"text\": {\r",
									"              \"type\": \"string\"\r",
									"            }\r",
									"          },\r",
									"          \"required\": [\r",
									"            \"type\",\r",
									"            \"id\",\r",
									"            \"username\",\r",
									"            \"text\"\r",
									"          ]\r",
									"        },\r",
									"        {\r",
									"          \"type\": \"object\",\r",
									"          \"properties\": {\r",
									"            \"type\": {\r",
									"              \"type\": \"string\"\r",
									"            },\r",
									"            \"text\": {\r",
									"              \"type\": \"string\"\r",
									"            },\r",
									"            \"hideIfContext\": {\r",
									"              \"type\": \"boolean\"\r",
									"            },\r",
									"            \"idContext\": {\r",
									"              \"type\": \"string\"\r",
									"            }\r",
									"          },\r",
									"          \"required\": [\r",
									"            \"type\",\r",
									"            \"text\",\r",
									"            \"hideIfContext\",\r",
									"            \"idContext\"\r",
									"          ]\r",
									"        },\r",
									"        {\r",
									"          \"type\": \"object\",\r",
									"          \"properties\": {\r",
									"            \"type\": {\r",
									"              \"type\": \"string\"\r",
									"            },\r",
									"            \"hideIfContext\": {\r",
									"              \"type\": \"boolean\"\r",
									"            },\r",
									"            \"id\": {\r",
									"              \"type\": \"string\"\r",
									"            },\r",
									"            \"shortLink\": {\r",
									"              \"type\": \"string\"\r",
									"            },\r",
									"            \"text\": {\r",
									"              \"type\": \"string\"\r",
									"            }\r",
									"          },\r",
									"          \"required\": [\r",
									"            \"type\",\r",
									"            \"hideIfContext\",\r",
									"            \"id\",\r",
									"            \"shortLink\",\r",
									"            \"text\"\r",
									"          ]\r",
									"        },\r",
									"        {\r",
									"          \"type\": \"object\",\r",
									"          \"properties\": {\r",
									"            \"type\": {\r",
									"              \"type\": \"string\"\r",
									"            },\r",
									"            \"text\": {\r",
									"              \"type\": \"string\"\r",
									"            }\r",
									"          },\r",
									"          \"required\": [\r",
									"            \"type\",\r",
									"            \"text\"\r",
									"          ]\r",
									"        }\r",
									"      ]\r",
									"    },\r",
									"    \"memberCreator\": {\r",
									"      \"type\": \"object\",\r",
									"      \"properties\": {\r",
									"        \"id\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"activityBlocked\": {\r",
									"          \"type\": \"boolean\"\r",
									"        },\r",
									"        \"avatarHash\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"avatarUrl\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"fullName\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"idMemberReferrer\": {\r",
									"          \"type\": \"null\"\r",
									"        },\r",
									"        \"initials\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"nonPublic\": {\r",
									"          \"type\": \"object\"\r",
									"        },\r",
									"        \"nonPublicAvailable\": {\r",
									"          \"type\": \"boolean\"\r",
									"        },\r",
									"        \"username\": {\r",
									"          \"type\": \"string\"\r",
									"        }\r",
									"      },\r",
									"      \"required\": [\r",
									"        \"id\",\r",
									"        \"activityBlocked\",\r",
									"        \"avatarHash\",\r",
									"        \"avatarUrl\",\r",
									"        \"fullName\",\r",
									"        \"idMemberReferrer\",\r",
									"        \"initials\",\r",
									"        \"nonPublic\",\r",
									"        \"nonPublicAvailable\",\r",
									"        \"username\"\r",
									"      ]\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"id\",\r",
									"    \"idMemberCreator\",\r",
									"    \"data\",\r",
									"    \"appCreator\",\r",
									"    \"type\",\r",
									"    \"date\",\r",
									"    \"limits\",\r",
									"    \"display\",\r",
									"    \"entities\",\r",
									"    \"memberCreator\"\r",
									"  ]\r",
									"}\r",
									"\r",
									"// check status code\r",
									"pm.test(\"Status code is 200\",  () => {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"// check response time\r",
									"pm.test(\"Response time is less than 3s\",  () => {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(3000);\r",
									"});\r",
									"\r",
									"// check if returned response in json format \r",
									"pm.test(\"verify content-type is in json format\", ()=>{\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).is.eql(\"application/json; charset=utf-8\");\r",
									"});\r",
									"\r",
									"// Parse the response body as JSON\r",
									"var jsonData = pm.response.json();\r",
									"\r",
									"\r",
									"\r",
									"// Perform JSON schema validation\r",
									"const result = tv4.validate(jsonData, action_schema);\r",
									"\r",
									"// Assert the result using Postman test assertions\r",
									"pm.test(\"Validate that JSON schema is correct\", ()=>{\r",
									"    pm.expect(result).to.be.true;\r",
									"});\r",
									"\r",
									"// check the comment\r",
									"pm.test(\"verify the sent comment text\", ()=>{\r",
									"    pm.expect(jsonData.data.text).is.eql(pm.collectionVariables.get(\"comment\"));\r",
									"\r",
									"});\r",
									"\r",
									"// check id of the board & card & list\r",
									"pm.test(\"verify the id of board & list & card are correct\", ()=>{\r",
									"    pm.expect(jsonData.data.board.id).is.eql(pm.environment.get(\"boardId\"));\r",
									"    pm.expect(jsonData.data.list.id).is.eql(pm.environment.get(\"listId\"));\r",
									"    pm.expect(jsonData.data.card.id).is.eql(pm.environment.get(\"cardId\"));\r",
									"\r",
									"\r",
									"});\r",
									"\r",
									"// check commentId id isn't null\r",
									"pm.test(\"verify the id of comment isn't null\", ()=>{\r",
									"    pm.expect(jsonData.id).is.not.null;\r",
									"});\r",
									"// set commentId \r",
									"pm.environment.set(\"actionId\",jsonData.id)\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{base-url}}/cards/{{cardId}}/actions/comments?text={{comment}}&key={{APIKey}}&token={{APIToken}}",
							"host": [
								"{{base-url}}"
							],
							"path": [
								"cards",
								"{{cardId}}",
								"actions",
								"comments"
							],
							"query": [
								{
									"key": "text",
									"value": "{{comment}}"
								},
								{
									"key": "key",
									"value": "{{APIKey}}"
								},
								{
									"key": "token",
									"value": "{{APIToken}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Create-Reaction-To-Comment",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.collectionVariables.set(\"emojiName\",\"grinning\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"const reaction_schema={\r",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"id\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"idMember\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"idModel\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"idEmoji\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"member\": {\r",
									"      \"type\": \"object\",\r",
									"      \"properties\": {\r",
									"        \"id\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"activityBlocked\": {\r",
									"          \"type\": \"boolean\"\r",
									"        },\r",
									"        \"avatarHash\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"avatarUrl\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"fullName\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"idMemberReferrer\": {\r",
									"          \"type\": \"null\"\r",
									"        },\r",
									"        \"initials\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"nonPublic\": {\r",
									"          \"type\": \"object\"\r",
									"        },\r",
									"        \"nonPublicAvailable\": {\r",
									"          \"type\": \"boolean\"\r",
									"        },\r",
									"        \"username\": {\r",
									"          \"type\": \"string\"\r",
									"        }\r",
									"      },\r",
									"      \"required\": [\r",
									"        \"id\",\r",
									"        \"activityBlocked\",\r",
									"        \"avatarHash\",\r",
									"        \"avatarUrl\",\r",
									"        \"fullName\",\r",
									"        \"idMemberReferrer\",\r",
									"        \"initials\",\r",
									"        \"nonPublic\",\r",
									"        \"nonPublicAvailable\",\r",
									"        \"username\"\r",
									"      ]\r",
									"    },\r",
									"    \"emoji\": {\r",
									"      \"type\": \"object\",\r",
									"      \"properties\": {\r",
									"        \"unified\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"native\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"name\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"skinVariation\": {\r",
									"          \"type\": \"null\"\r",
									"        },\r",
									"        \"shortName\": {\r",
									"          \"type\": \"string\"\r",
									"        }\r",
									"      },\r",
									"      \"required\": [\r",
									"        \"unified\",\r",
									"        \"native\",\r",
									"        \"name\",\r",
									"        \"skinVariation\",\r",
									"        \"shortName\"\r",
									"      ]\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"id\",\r",
									"    \"idMember\",\r",
									"    \"idModel\",\r",
									"    \"idEmoji\",\r",
									"    \"member\",\r",
									"    \"emoji\"\r",
									"  ]\r",
									"}\r",
									"\r",
									"// check status code\r",
									"pm.test(\"Status code is 200\",  () => {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"// check response time\r",
									"pm.test(\"Response time is less than 3s\",  () => {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(3000);\r",
									"});\r",
									"\r",
									"// check if returned response in json format \r",
									"pm.test(\"verify content-type is in json format\", ()=>{\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).is.eql(\"application/json; charset=utf-8\");\r",
									"});\r",
									"\r",
									"// Parse the response body as JSON\r",
									"var jsonData = pm.response.json();\r",
									"\r",
									"\r",
									"\r",
									"// Perform JSON schema validation\r",
									"const result = tv4.validate(jsonData, reaction_schema);\r",
									"\r",
									"// Assert the result using Postman test assertions\r",
									"pm.test(\"Validate that JSON schema is correct\", ()=>{\r",
									"    pm.expect(result).to.be.true;\r",
									"});\r",
									"\r",
									"// check the emoji name\r",
									"pm.test(\"verify the sent emoji name\", ()=>{\r",
									"    pm.expect(jsonData.emoji.shortName).is.eql(pm.collectionVariables.get(\"emojiName\"));\r",
									"\r",
									"});\r",
									"\r",
									"// check id of comment\r",
									"pm.test(\"verify the id of comment is correct\", ()=>{\r",
									"    pm.expect(jsonData.idModel).is.eql(pm.environment.get(\"actionId\"));\r",
									"\r",
									"\r",
									"});\r",
									"\r",
									"// check reactionId id isn't null\r",
									"pm.test(\"verify the id of reaction isn't null\", ()=>{\r",
									"    pm.expect(jsonData.id).is.not.null;\r",
									"});\r",
									"// set reactionId \r",
									"pm.environment.set(\"reactionId\",jsonData.id)\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"shortName\": \"{{emojiName}}\"\n}"
						},
						"url": {
							"raw": "{{base-url}}/actions/{{actionId}}/reactions?key={{APIKey}}&token={{APIToken}}",
							"host": [
								"{{base-url}}"
							],
							"path": [
								"actions",
								"{{actionId}}",
								"reactions"
							],
							"query": [
								{
									"key": "key",
									"value": "{{APIKey}}"
								},
								{
									"key": "token",
									"value": "{{APIToken}}"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Delete",
			"item": [
				{
					"name": "Delete-Reaction",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// check status code\r",
									"pm.test(\"Status code is 200\",  () => {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"// check response time\r",
									"pm.test(\"Response time is less than 3s\",  () => {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(3000);\r",
									"});\r",
									"\r",
									"// check if returned response in json format \r",
									"pm.test(\"verify content-type is in json format\", ()=>{\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).is.eql(\"application/json; charset=utf-8\");\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{base-url}}/actions/{{actionId}}/reactions/{{reactionId}}?key={{APIKey}}&token={{APIToken}}",
							"host": [
								"{{base-url}}"
							],
							"path": [
								"actions",
								"{{actionId}}",
								"reactions",
								"{{reactionId}}"
							],
							"query": [
								{
									"key": "key",
									"value": "{{APIKey}}"
								},
								{
									"key": "token",
									"value": "{{APIToken}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete-Action",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// check status code\r",
									"pm.test(\"Status code is 200\",  () => {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"// check response time\r",
									"pm.test(\"Response time is less than 3s\",  () => {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(3000);\r",
									"});\r",
									"\r",
									"// check if returned response in json format \r",
									"pm.test(\"verify content-type is in json format\", ()=>{\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).is.eql(\"application/json; charset=utf-8\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{base-url}}/actions/{{actionId}}?key={{APIKey}}&token={{APIToken}}",
							"host": [
								"{{base-url}}"
							],
							"path": [
								"actions",
								"{{actionId}}"
							],
							"query": [
								{
									"key": "key",
									"value": "{{APIKey}}"
								},
								{
									"key": "token",
									"value": "{{APIToken}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete-Checkitem",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// check status code\r",
									"pm.test(\"Status code is 200\",  () => {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"// check response time\r",
									"pm.test(\"Response time is less than 3s\",  () => {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(3000);\r",
									"});\r",
									"\r",
									"// check if returned response in json format \r",
									"pm.test(\"verify content-type is in json format\", ()=>{\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).is.eql(\"application/json; charset=utf-8\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{base-url}}/checklists/{{checklistId}}/checkItems/{{checkitemId}}?key={{APIKey}}&token={{APIToken}}",
							"host": [
								"{{base-url}}"
							],
							"path": [
								"checklists",
								"{{checklistId}}",
								"checkItems",
								"{{checkitemId}}"
							],
							"query": [
								{
									"key": "key",
									"value": "{{APIKey}}"
								},
								{
									"key": "token",
									"value": "{{APIToken}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete-Checklist",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// check status code\r",
									"pm.test(\"Status code is 200\",  () => {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"// check response time\r",
									"pm.test(\"Response time is less than 3s\",  () => {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(3000);\r",
									"});\r",
									"\r",
									"// check if returned response in json format \r",
									"pm.test(\"verify content-type is in json format\", ()=>{\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).is.eql(\"application/json; charset=utf-8\");\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{base-url}}/checklists/{{checklistId}}?key={{APIKey}}&token={{APIToken}}",
							"host": [
								"{{base-url}}"
							],
							"path": [
								"checklists",
								"{{checklistId}}"
							],
							"query": [
								{
									"key": "key",
									"value": "{{APIKey}}"
								},
								{
									"key": "token",
									"value": "{{APIToken}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete-Attach",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// check status code\r",
									"pm.test(\"Status code is 200\",  () => {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"// check response time\r",
									"pm.test(\"Response time is less than 3s\",  () => {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(3000);\r",
									"});\r",
									"\r",
									"// check if returned response in json format \r",
									"pm.test(\"verify content-type is in json format\", ()=>{\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).is.eql(\"application/json; charset=utf-8\");\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{base-url}}/cards/{{cardId}}/attachments/{{attachId}}?key={{APIKey}}&token={{APIToken}}",
							"host": [
								"{{base-url}}"
							],
							"path": [
								"cards",
								"{{cardId}}",
								"attachments",
								"{{attachId}}"
							],
							"query": [
								{
									"key": "key",
									"value": "{{APIKey}}"
								},
								{
									"key": "token",
									"value": "{{APIToken}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete-Card",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// check status code\r",
									"pm.test(\"Status code is 200\",  () => {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"// check response time\r",
									"pm.test(\"Response time is less than 3s\",  () => {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(3000);\r",
									"});\r",
									"\r",
									"// check if returned response in json format \r",
									"pm.test(\"verify content-type is in json format\", ()=>{\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).is.eql(\"application/json; charset=utf-8\");\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{base-url}}/cards/{{cardId}}?key={{APIKey}}&token={{APIToken}}",
							"host": [
								"{{base-url}}"
							],
							"path": [
								"cards",
								"{{cardId}}"
							],
							"query": [
								{
									"key": "key",
									"value": "{{APIKey}}"
								},
								{
									"key": "token",
									"value": "{{APIToken}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete-Board",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// check status code\r",
									"pm.test(\"Status code is 200\",  () => {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"// check response time\r",
									"pm.test(\"Response time is less than 3s\",  () => {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(3000);\r",
									"});\r",
									"\r",
									"// check if returned response in json format \r",
									"pm.test(\"verify content-type is in json format\", ()=>{\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).is.eql(\"application/json; charset=utf-8\");\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{base-url}}/boards/{{boardId}}?key={{APIKey}}&token={{APIToken}}",
							"host": [
								"{{base-url}}"
							],
							"path": [
								"boards",
								"{{boardId}}"
							],
							"query": [
								{
									"key": "key",
									"value": "{{APIKey}}"
								},
								{
									"key": "token",
									"value": "{{APIToken}}"
								}
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "name",
			"value": ""
		},
		{
			"key": "desc",
			"value": ""
		},
		{
			"key": "listName",
			"value": ""
		},
		{
			"key": "attachName",
			"value": ""
		},
		{
			"key": "emojiName",
			"value": ""
		},
		{
			"key": "cardName",
			"value": ""
		},
		{
			"key": "labelName",
			"value": ""
		},
		{
			"key": "checklistName",
			"value": ""
		},
		{
			"key": "checkitemName",
			"value": ""
		},
		{
			"key": "comment",
			"value": ""
		}
	]
}